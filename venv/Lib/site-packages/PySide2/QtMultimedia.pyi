# This Python file uses the following encoding: utf-8
#############################################################################
##
## Copyright (C) 2019 The Qt Company Ltd.
## Contact: https://www.qt.io/licensing/
##
## This file is part of Qt for Python.
##
## $QT_BEGIN_LICENSE:LGPL$
## Commercial License Usage
## Licensees holding valid commercial Qt licenses may use this file in
## accordance with the commercial license agreement provided with the
## Software or, alternatively, in accordance with the terms contained in
## a written agreement between you and The Qt Company. For licensing terms
## and conditions see https://www.qt.io/terms-conditions. For further
## information use the contact form at https://www.qt.io/contact-us.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 3 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL3 included in the
## packaging of this file. Please review the following information to
## ensure the GNU Lesser General Public License version 3 requirements
## will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
##
## GNU General Public License Usage
## Alternatively, this file may be used under the terms of the GNU
## General Public License version 2.0 or (at your option) the GNU General
## Public license version 3 or any later version approved by the KDE Free
## Qt Foundation. The licenses are as published by the Free Software
## Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
## included in the packaging of this file. Please review the following
## information to ensure the GNU General Public License requirements will
## be met: https://www.gnu.org/licenses/gpl-2.0.html and
## https://www.gnu.org/licenses/gpl-3.0.html.
##
## $QT_END_LICENSE$
##
#############################################################################

"""
This file contains the exact signatures for all functions in module
PySide2.QtMultimedia, except for defaults which are replaced by "...".
"""

# Module PySide2.QtMultimedia
import PySide2
from PySide2.support.signature import typing
from PySide2.support.signature.mapping import (
    Virtual, Missing, Invalid, Default, Instance)

class Object(object): pass

import shiboken2 as Shiboken
Shiboken.Object = Object

import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtMultimediaWidgets
import PySide2.QtMultimedia


class QAbstractAudioDeviceInfo(PySide2.QtCore.QObject):

    def __init__(self): ...

    def deviceName(self) -> str: ...
    def isFormatSupported(self, format:PySide2.QtMultimedia.QAudioFormat) -> bool: ...
    def preferredFormat(self) -> PySide2.QtMultimedia.QAudioFormat: ...
    def supportedByteOrders(self) -> typing.List: ...
    def supportedChannelCounts(self) -> typing.List: ...
    def supportedCodecs(self) -> typing.List: ...
    def supportedSampleRates(self) -> typing.List: ...
    def supportedSampleSizes(self) -> typing.List: ...
    def supportedSampleTypes(self) -> typing.List: ...


class QAbstractAudioInput(PySide2.QtCore.QObject):

    def __init__(self): ...

    def bufferSize(self) -> int: ...
    def bytesReady(self) -> int: ...
    def elapsedUSecs(self) -> int: ...
    def error(self) -> PySide2.QtMultimedia.QAudio.Error: ...
    def format(self) -> PySide2.QtMultimedia.QAudioFormat: ...
    def notifyInterval(self) -> int: ...
    def periodSize(self) -> int: ...
    def processedUSecs(self) -> int: ...
    def reset(self): ...
    def resume(self): ...
    def setBufferSize(self, value:int): ...
    def setFormat(self, fmt:PySide2.QtMultimedia.QAudioFormat): ...
    def setNotifyInterval(self, milliSeconds:int): ...
    def setVolume(self, arg__1:float): ...
    @typing.overload
    def start(self) -> PySide2.QtCore.QIODevice: ...
    @typing.overload
    def start(self, device:PySide2.QtCore.QIODevice): ...
    def state(self) -> PySide2.QtMultimedia.QAudio.State: ...
    def stop(self): ...
    def suspend(self): ...
    def volume(self) -> float: ...


class QAbstractAudioOutput(PySide2.QtCore.QObject):

    def __init__(self): ...

    def bufferSize(self) -> int: ...
    def bytesFree(self) -> int: ...
    def category(self) -> str: ...
    def elapsedUSecs(self) -> int: ...
    def error(self) -> PySide2.QtMultimedia.QAudio.Error: ...
    def format(self) -> PySide2.QtMultimedia.QAudioFormat: ...
    def notifyInterval(self) -> int: ...
    def periodSize(self) -> int: ...
    def processedUSecs(self) -> int: ...
    def reset(self): ...
    def resume(self): ...
    def setBufferSize(self, value:int): ...
    def setCategory(self, arg__1:str): ...
    def setFormat(self, fmt:PySide2.QtMultimedia.QAudioFormat): ...
    def setNotifyInterval(self, milliSeconds:int): ...
    def setVolume(self, arg__1:float): ...
    @typing.overload
    def start(self) -> PySide2.QtCore.QIODevice: ...
    @typing.overload
    def start(self, device:PySide2.QtCore.QIODevice): ...
    def state(self) -> PySide2.QtMultimedia.QAudio.State: ...
    def stop(self): ...
    def suspend(self): ...
    def volume(self) -> float: ...


class QAbstractVideoBuffer(Shiboken.Object):

    class HandleType(object): ...
    NoHandle                 : HandleType = ... # 0x0
    GLTextureHandle          : HandleType = ... # 0x1
    XvShmImageHandle         : HandleType = ... # 0x2
    CoreImageHandle          : HandleType = ... # 0x3
    QPixmapHandle            : HandleType = ... # 0x4
    EGLImageHandle           : HandleType = ... # 0x5
    UserHandle               : HandleType = ... # 0x3e8

    class MapMode(object): ...
    NotMapped                : MapMode = ... # 0x0
    ReadOnly                 : MapMode = ... # 0x1
    WriteOnly                : MapMode = ... # 0x2
    ReadWrite                : MapMode = ... # 0x3

    def __init__(self, type:PySide2.QtMultimedia.QAbstractVideoBuffer.HandleType): ...

    def handle(self) -> typing.Any: ...
    def handleType(self) -> PySide2.QtMultimedia.QAbstractVideoBuffer.HandleType: ...
    def mapMode(self) -> PySide2.QtMultimedia.QAbstractVideoBuffer.MapMode: ...
    def release(self): ...
    def unmap(self): ...


class QAbstractVideoFilter(PySide2.QtCore.QObject):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def createFilterRunnable(self) -> PySide2.QtMultimedia.QVideoFilterRunnable: ...
    def isActive(self) -> bool: ...
    def setActive(self, v:bool): ...


class QAbstractVideoSurface(PySide2.QtCore.QObject):

    class Error(object): ...
    NoError                  : Error = ... # 0x0
    UnsupportedFormatError   : Error = ... # 0x1
    IncorrectFormatError     : Error = ... # 0x2
    StoppedError             : Error = ... # 0x3
    ResourceError            : Error = ... # 0x4

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def error(self) -> PySide2.QtMultimedia.QAbstractVideoSurface.Error: ...
    def isActive(self) -> bool: ...
    def isFormatSupported(self, format:PySide2.QtMultimedia.QVideoSurfaceFormat) -> bool: ...
    def nativeResolution(self) -> PySide2.QtCore.QSize: ...
    def nearestFormat(self, format:PySide2.QtMultimedia.QVideoSurfaceFormat) -> PySide2.QtMultimedia.QVideoSurfaceFormat: ...
    def present(self, frame:PySide2.QtMultimedia.QVideoFrame) -> bool: ...
    def setError(self, error:PySide2.QtMultimedia.QAbstractVideoSurface.Error): ...
    def setNativeResolution(self, resolution:PySide2.QtCore.QSize): ...
    def start(self, format:PySide2.QtMultimedia.QVideoSurfaceFormat) -> bool: ...
    def stop(self): ...
    def supportedPixelFormats(self, type:PySide2.QtMultimedia.QAbstractVideoBuffer.HandleType=...) -> typing.List: ...
    def surfaceFormat(self) -> PySide2.QtMultimedia.QVideoSurfaceFormat: ...


class QAudio(Shiboken.Object):

    class Error(object): ...
    NoError                  : Error = ... # 0x0
    OpenError                : Error = ... # 0x1
    IOError                  : Error = ... # 0x2
    UnderrunError            : Error = ... # 0x3
    FatalError               : Error = ... # 0x4

    class Mode(object): ...
    AudioInput               : Mode = ... # 0x0
    AudioOutput              : Mode = ... # 0x1

    class Role(object): ...
    UnknownRole              : Role = ... # 0x0
    MusicRole                : Role = ... # 0x1
    VideoRole                : Role = ... # 0x2
    VoiceCommunicationRole   : Role = ... # 0x3
    AlarmRole                : Role = ... # 0x4
    NotificationRole         : Role = ... # 0x5
    RingtoneRole             : Role = ... # 0x6
    AccessibilityRole        : Role = ... # 0x7
    SonificationRole         : Role = ... # 0x8
    GameRole                 : Role = ... # 0x9
    CustomRole               : Role = ... # 0xa

    class State(object): ...
    ActiveState              : State = ... # 0x0
    SuspendedState           : State = ... # 0x1
    StoppedState             : State = ... # 0x2
    IdleState                : State = ... # 0x3
    InterruptedState         : State = ... # 0x4

    class VolumeScale(object): ...
    LinearVolumeScale        : VolumeScale = ... # 0x0
    CubicVolumeScale         : VolumeScale = ... # 0x1
    LogarithmicVolumeScale   : VolumeScale = ... # 0x2
    DecibelVolumeScale       : VolumeScale = ... # 0x3
    @staticmethod
    def convertVolume(volume:float, from_:PySide2.QtMultimedia.QAudio.VolumeScale, to:PySide2.QtMultimedia.QAudio.VolumeScale) -> float: ...


class QAudioBuffer(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, data:PySide2.QtCore.QByteArray, format:PySide2.QtMultimedia.QAudioFormat, startTime:int=...): ...
    @typing.overload
    def __init__(self, numFrames:int, format:PySide2.QtMultimedia.QAudioFormat, startTime:int=...): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QAudioBuffer): ...

    def __copy__(self): ...
    def byteCount(self) -> int: ...
    def constData(self) -> int: ...
    def data(self) -> int: ...
    def duration(self) -> int: ...
    def format(self) -> PySide2.QtMultimedia.QAudioFormat: ...
    def frameCount(self) -> int: ...
    def isValid(self) -> bool: ...
    def sampleCount(self) -> int: ...
    def startTime(self) -> int: ...


class QAudioDecoder(PySide2.QtMultimedia.QMediaObject):

    class Error(object): ...
    NoError                  : Error = ... # 0x0
    ResourceError            : Error = ... # 0x1
    FormatError              : Error = ... # 0x2
    AccessDeniedError        : Error = ... # 0x3
    ServiceMissingError      : Error = ... # 0x4

    class State(object): ...
    StoppedState             : State = ... # 0x0
    DecodingState            : State = ... # 0x1

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def audioFormat(self) -> PySide2.QtMultimedia.QAudioFormat: ...
    def bind(self, arg__1:PySide2.QtCore.QObject) -> bool: ...
    def bufferAvailable(self) -> bool: ...
    def duration(self) -> int: ...
    def error(self) -> PySide2.QtMultimedia.QAudioDecoder.Error: ...
    def errorString(self) -> str: ...
    @staticmethod
    def hasSupport(mimeType:str, codecs:typing.List=...) -> PySide2.QtMultimedia.QMultimedia.SupportEstimate: ...
    def position(self) -> int: ...
    def read(self) -> PySide2.QtMultimedia.QAudioBuffer: ...
    def setAudioFormat(self, format:PySide2.QtMultimedia.QAudioFormat): ...
    def setSourceDevice(self, device:PySide2.QtCore.QIODevice): ...
    def setSourceFilename(self, fileName:str): ...
    def sourceDevice(self) -> PySide2.QtCore.QIODevice: ...
    def sourceFilename(self) -> str: ...
    def start(self): ...
    def state(self) -> PySide2.QtMultimedia.QAudioDecoder.State: ...
    def stop(self): ...
    def unbind(self, arg__1:PySide2.QtCore.QObject): ...


class QAudioDecoderControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def audioFormat(self) -> PySide2.QtMultimedia.QAudioFormat: ...
    def bufferAvailable(self) -> bool: ...
    def duration(self) -> int: ...
    def position(self) -> int: ...
    def read(self) -> PySide2.QtMultimedia.QAudioBuffer: ...
    def setAudioFormat(self, format:PySide2.QtMultimedia.QAudioFormat): ...
    def setSourceDevice(self, device:PySide2.QtCore.QIODevice): ...
    def setSourceFilename(self, fileName:str): ...
    def sourceDevice(self) -> PySide2.QtCore.QIODevice: ...
    def sourceFilename(self) -> str: ...
    def start(self): ...
    def state(self) -> PySide2.QtMultimedia.QAudioDecoder.State: ...
    def stop(self): ...


class QAudioDeviceInfo(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QAudioDeviceInfo): ...

    def __copy__(self): ...
    @staticmethod
    def availableDevices(mode:PySide2.QtMultimedia.QAudio.Mode) -> typing.List: ...
    @staticmethod
    def defaultInputDevice() -> PySide2.QtMultimedia.QAudioDeviceInfo: ...
    @staticmethod
    def defaultOutputDevice() -> PySide2.QtMultimedia.QAudioDeviceInfo: ...
    def deviceName(self) -> str: ...
    def isFormatSupported(self, format:PySide2.QtMultimedia.QAudioFormat) -> bool: ...
    def isNull(self) -> bool: ...
    def nearestFormat(self, format:PySide2.QtMultimedia.QAudioFormat) -> PySide2.QtMultimedia.QAudioFormat: ...
    def preferredFormat(self) -> PySide2.QtMultimedia.QAudioFormat: ...
    def supportedByteOrders(self) -> typing.List: ...
    def supportedChannelCounts(self) -> typing.List: ...
    def supportedCodecs(self) -> typing.List: ...
    def supportedSampleRates(self) -> typing.List: ...
    def supportedSampleSizes(self) -> typing.List: ...
    def supportedSampleTypes(self) -> typing.List: ...


class QAudioEncoderSettings(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QAudioEncoderSettings): ...

    def __copy__(self): ...
    def bitRate(self) -> int: ...
    def channelCount(self) -> int: ...
    def codec(self) -> str: ...
    def encodingMode(self) -> PySide2.QtMultimedia.QMultimedia.EncodingMode: ...
    def encodingOption(self, option:str) -> typing.Any: ...
    def encodingOptions(self) -> typing.Dict: ...
    def isNull(self) -> bool: ...
    def quality(self) -> PySide2.QtMultimedia.QMultimedia.EncodingQuality: ...
    def sampleRate(self) -> int: ...
    def setBitRate(self, bitrate:int): ...
    def setChannelCount(self, channels:int): ...
    def setCodec(self, codec:str): ...
    def setEncodingMode(self, arg__1:PySide2.QtMultimedia.QMultimedia.EncodingMode): ...
    def setEncodingOption(self, option:str, value:typing.Any): ...
    def setEncodingOptions(self, options:typing.Dict): ...
    def setQuality(self, quality:PySide2.QtMultimedia.QMultimedia.EncodingQuality): ...
    def setSampleRate(self, rate:int): ...


class QAudioEncoderSettingsControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def audioSettings(self) -> PySide2.QtMultimedia.QAudioEncoderSettings: ...
    def codecDescription(self, codecName:str) -> str: ...
    def setAudioSettings(self, settings:PySide2.QtMultimedia.QAudioEncoderSettings): ...
    def supportedAudioCodecs(self) -> typing.List: ...


class QAudioFormat(Shiboken.Object):

    class Endian(object): ...
    BigEndian                : Endian = ... # 0x0
    LittleEndian             : Endian = ... # 0x1

    class SampleType(object): ...
    Unknown                  : SampleType = ... # 0x0
    SignedInt                : SampleType = ... # 0x1
    UnSignedInt              : SampleType = ... # 0x2
    Float                    : SampleType = ... # 0x3

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QAudioFormat): ...

    def __copy__(self): ...
    def byteOrder(self) -> PySide2.QtMultimedia.QAudioFormat.Endian: ...
    def bytesForDuration(self, duration:int) -> int: ...
    def bytesForFrames(self, frameCount:int) -> int: ...
    def bytesPerFrame(self) -> int: ...
    def channelCount(self) -> int: ...
    def codec(self) -> str: ...
    def durationForBytes(self, byteCount:int) -> int: ...
    def durationForFrames(self, frameCount:int) -> int: ...
    def framesForBytes(self, byteCount:int) -> int: ...
    def framesForDuration(self, duration:int) -> int: ...
    def isValid(self) -> bool: ...
    def sampleRate(self) -> int: ...
    def sampleSize(self) -> int: ...
    def sampleType(self) -> PySide2.QtMultimedia.QAudioFormat.SampleType: ...
    def setByteOrder(self, byteOrder:PySide2.QtMultimedia.QAudioFormat.Endian): ...
    def setChannelCount(self, channelCount:int): ...
    def setCodec(self, codec:str): ...
    def setSampleRate(self, sampleRate:int): ...
    def setSampleSize(self, sampleSize:int): ...
    def setSampleType(self, sampleType:PySide2.QtMultimedia.QAudioFormat.SampleType): ...


class QAudioInput(PySide2.QtCore.QObject):

    @typing.overload
    def __init__(self, audioDeviceInfo:PySide2.QtMultimedia.QAudioDeviceInfo, format:PySide2.QtMultimedia.QAudioFormat=..., parent:typing.Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, format:PySide2.QtMultimedia.QAudioFormat=..., parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def bufferSize(self) -> int: ...
    def bytesReady(self) -> int: ...
    def elapsedUSecs(self) -> int: ...
    def error(self) -> PySide2.QtMultimedia.QAudio.Error: ...
    def format(self) -> PySide2.QtMultimedia.QAudioFormat: ...
    def notifyInterval(self) -> int: ...
    def periodSize(self) -> int: ...
    def processedUSecs(self) -> int: ...
    def reset(self): ...
    def resume(self): ...
    def setBufferSize(self, bytes:int): ...
    def setNotifyInterval(self, milliSeconds:int): ...
    def setVolume(self, volume:float): ...
    @typing.overload
    def start(self) -> PySide2.QtCore.QIODevice: ...
    @typing.overload
    def start(self, device:PySide2.QtCore.QIODevice): ...
    def state(self) -> PySide2.QtMultimedia.QAudio.State: ...
    def stop(self): ...
    def suspend(self): ...
    def volume(self) -> float: ...


class QAudioInputSelectorControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def activeInput(self) -> str: ...
    def availableInputs(self) -> typing.List: ...
    def defaultInput(self) -> str: ...
    def inputDescription(self, name:str) -> str: ...
    def setActiveInput(self, name:str): ...


class QAudioOutput(PySide2.QtCore.QObject):

    @typing.overload
    def __init__(self, audioDeviceInfo:PySide2.QtMultimedia.QAudioDeviceInfo, format:PySide2.QtMultimedia.QAudioFormat=..., parent:typing.Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, format:PySide2.QtMultimedia.QAudioFormat=..., parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def bufferSize(self) -> int: ...
    def bytesFree(self) -> int: ...
    def category(self) -> str: ...
    def elapsedUSecs(self) -> int: ...
    def error(self) -> PySide2.QtMultimedia.QAudio.Error: ...
    def format(self) -> PySide2.QtMultimedia.QAudioFormat: ...
    def notifyInterval(self) -> int: ...
    def periodSize(self) -> int: ...
    def processedUSecs(self) -> int: ...
    def reset(self): ...
    def resume(self): ...
    def setBufferSize(self, bytes:int): ...
    def setCategory(self, category:str): ...
    def setNotifyInterval(self, milliSeconds:int): ...
    def setVolume(self, arg__1:float): ...
    @typing.overload
    def start(self) -> PySide2.QtCore.QIODevice: ...
    @typing.overload
    def start(self, device:PySide2.QtCore.QIODevice): ...
    def state(self) -> PySide2.QtMultimedia.QAudio.State: ...
    def stop(self): ...
    def suspend(self): ...
    def volume(self) -> float: ...


class QAudioOutputSelectorControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def activeOutput(self) -> str: ...
    def availableOutputs(self) -> typing.List: ...
    def defaultOutput(self) -> str: ...
    def outputDescription(self, name:str) -> str: ...
    def setActiveOutput(self, name:str): ...


class QAudioProbe(PySide2.QtCore.QObject):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def isActive(self) -> bool: ...
    @typing.overload
    def setSource(self, source:PySide2.QtMultimedia.QMediaObject) -> bool: ...
    @typing.overload
    def setSource(self, source:PySide2.QtMultimedia.QMediaRecorder) -> bool: ...


class QAudioRecorder(PySide2.QtMultimedia.QMediaRecorder):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def audioInput(self) -> str: ...
    def audioInputDescription(self, name:str) -> str: ...
    def audioInputs(self) -> typing.List: ...
    def defaultAudioInput(self) -> str: ...
    def setAudioInput(self, name:str): ...


class QAudioRoleControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def audioRole(self) -> PySide2.QtMultimedia.QAudio.Role: ...
    def setAudioRole(self, role:PySide2.QtMultimedia.QAudio.Role): ...
    def supportedAudioRoles(self) -> typing.List: ...


class QCamera(PySide2.QtMultimedia.QMediaObject):

    class CaptureMode(object): ...
    CaptureViewfinder        : CaptureMode = ... # 0x0
    CaptureStillImage        : CaptureMode = ... # 0x1
    CaptureVideo             : CaptureMode = ... # 0x2

    class CaptureModes(object): ...

    class Error(object): ...
    NoError                  : Error = ... # 0x0
    CameraError              : Error = ... # 0x1
    InvalidRequestError      : Error = ... # 0x2
    ServiceMissingError      : Error = ... # 0x3
    NotSupportedFeatureError : Error = ... # 0x4

    class FrameRateRange(Shiboken.Object):

        @typing.overload
        def __init__(self): ...
        @typing.overload
        def __init__(self, FrameRateRange:PySide2.QtMultimedia.QCamera.FrameRateRange): ...
        @typing.overload
        def __init__(self, minimum:float, maximum:float): ...

        def __copy__(self): ...

    class LockChangeReason(object): ...
    UserRequest              : LockChangeReason = ... # 0x0
    LockAcquired             : LockChangeReason = ... # 0x1
    LockFailed               : LockChangeReason = ... # 0x2
    LockLost                 : LockChangeReason = ... # 0x3
    LockTemporaryLost        : LockChangeReason = ... # 0x4

    class LockStatus(object): ...
    Unlocked                 : LockStatus = ... # 0x0
    Searching                : LockStatus = ... # 0x1
    Locked                   : LockStatus = ... # 0x2

    class LockType(object): ...
    NoLock                   : LockType = ... # 0x0
    LockExposure             : LockType = ... # 0x1
    LockWhiteBalance         : LockType = ... # 0x2
    LockFocus                : LockType = ... # 0x4

    class LockTypes(object): ...

    class Position(object): ...
    UnspecifiedPosition      : Position = ... # 0x0
    BackFace                 : Position = ... # 0x1
    FrontFace                : Position = ... # 0x2

    class State(object): ...
    UnloadedState            : State = ... # 0x0
    LoadedState              : State = ... # 0x1
    ActiveState              : State = ... # 0x2

    class Status(object): ...
    UnavailableStatus        : Status = ... # 0x0
    UnloadedStatus           : Status = ... # 0x1
    LoadingStatus            : Status = ... # 0x2
    UnloadingStatus          : Status = ... # 0x3
    LoadedStatus             : Status = ... # 0x4
    StandbyStatus            : Status = ... # 0x5
    StartingStatus           : Status = ... # 0x6
    StoppingStatus           : Status = ... # 0x7
    ActiveStatus             : Status = ... # 0x8

    @typing.overload
    def __init__(self, cameraInfo:PySide2.QtMultimedia.QCameraInfo, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, deviceName:PySide2.QtCore.QByteArray, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, position:PySide2.QtMultimedia.QCamera.Position, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def availability(self) -> PySide2.QtMultimedia.QMultimedia.AvailabilityStatus: ...
    @staticmethod
    def availableDevices() -> typing.List: ...
    def captureMode(self) -> PySide2.QtMultimedia.QCamera.CaptureModes: ...
    @staticmethod
    def deviceDescription(device:PySide2.QtCore.QByteArray) -> str: ...
    def error(self) -> PySide2.QtMultimedia.QCamera.Error: ...
    def errorString(self) -> str: ...
    def isCaptureModeSupported(self, mode:PySide2.QtMultimedia.QCamera.CaptureModes) -> bool: ...
    def load(self): ...
    @typing.overload
    def lockStatus(self) -> PySide2.QtMultimedia.QCamera.LockStatus: ...
    @typing.overload
    def lockStatus(self, lock:PySide2.QtMultimedia.QCamera.LockType) -> PySide2.QtMultimedia.QCamera.LockStatus: ...
    def requestedLocks(self) -> PySide2.QtMultimedia.QCamera.LockTypes: ...
    @typing.overload
    def searchAndLock(self): ...
    @typing.overload
    def searchAndLock(self, locks:PySide2.QtMultimedia.QCamera.LockTypes): ...
    def setCaptureMode(self, mode:PySide2.QtMultimedia.QCamera.CaptureModes): ...
    @typing.overload
    def setViewfinder(self, surface:PySide2.QtMultimedia.QAbstractVideoSurface): ...
    @typing.overload
    def setViewfinder(self, viewfinder:PySide2.QtMultimediaWidgets.QGraphicsVideoItem): ...
    @typing.overload
    def setViewfinder(self, viewfinder:PySide2.QtMultimediaWidgets.QVideoWidget): ...
    def setViewfinderSettings(self, settings:PySide2.QtMultimedia.QCameraViewfinderSettings): ...
    def start(self): ...
    def state(self) -> PySide2.QtMultimedia.QCamera.State: ...
    def status(self) -> PySide2.QtMultimedia.QCamera.Status: ...
    def stop(self): ...
    def supportedLocks(self) -> PySide2.QtMultimedia.QCamera.LockTypes: ...
    def supportedViewfinderFrameRateRanges(self, settings:PySide2.QtMultimedia.QCameraViewfinderSettings=...) -> typing.List: ...
    def supportedViewfinderPixelFormats(self, settings:PySide2.QtMultimedia.QCameraViewfinderSettings=...) -> typing.List: ...
    def supportedViewfinderResolutions(self, settings:PySide2.QtMultimedia.QCameraViewfinderSettings=...) -> typing.List: ...
    def supportedViewfinderSettings(self, settings:PySide2.QtMultimedia.QCameraViewfinderSettings=...) -> typing.List: ...
    def unload(self): ...
    @typing.overload
    def unlock(self): ...
    @typing.overload
    def unlock(self, locks:PySide2.QtMultimedia.QCamera.LockTypes): ...
    def viewfinderSettings(self) -> PySide2.QtMultimedia.QCameraViewfinderSettings: ...


class QCameraCaptureBufferFormatControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def bufferFormat(self) -> PySide2.QtMultimedia.QVideoFrame.PixelFormat: ...
    def setBufferFormat(self, format:PySide2.QtMultimedia.QVideoFrame.PixelFormat): ...
    def supportedBufferFormats(self) -> typing.List: ...


class QCameraCaptureDestinationControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def captureDestination(self) -> PySide2.QtMultimedia.QCameraImageCapture.CaptureDestinations: ...
    def isCaptureDestinationSupported(self, destination:PySide2.QtMultimedia.QCameraImageCapture.CaptureDestinations) -> bool: ...
    def setCaptureDestination(self, destination:PySide2.QtMultimedia.QCameraImageCapture.CaptureDestinations): ...


class QCameraControl(PySide2.QtMultimedia.QMediaControl):

    class PropertyChangeType(object): ...
    CaptureMode              : PropertyChangeType = ... # 0x1
    ImageEncodingSettings    : PropertyChangeType = ... # 0x2
    VideoEncodingSettings    : PropertyChangeType = ... # 0x3
    Viewfinder               : PropertyChangeType = ... # 0x4
    ViewfinderSettings       : PropertyChangeType = ... # 0x5

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def canChangeProperty(self, changeType:PySide2.QtMultimedia.QCameraControl.PropertyChangeType, status:PySide2.QtMultimedia.QCamera.Status) -> bool: ...
    def captureMode(self) -> PySide2.QtMultimedia.QCamera.CaptureModes: ...
    def isCaptureModeSupported(self, mode:PySide2.QtMultimedia.QCamera.CaptureModes) -> bool: ...
    def setCaptureMode(self, arg__1:PySide2.QtMultimedia.QCamera.CaptureModes): ...
    def setState(self, state:PySide2.QtMultimedia.QCamera.State): ...
    def state(self) -> PySide2.QtMultimedia.QCamera.State: ...
    def status(self) -> PySide2.QtMultimedia.QCamera.Status: ...


class QCameraExposureControl(PySide2.QtMultimedia.QMediaControl):

    class ExposureParameter(object): ...
    ISO                      : ExposureParameter = ... # 0x0
    Aperture                 : ExposureParameter = ... # 0x1
    ShutterSpeed             : ExposureParameter = ... # 0x2
    ExposureCompensation     : ExposureParameter = ... # 0x3
    FlashPower               : ExposureParameter = ... # 0x4
    FlashCompensation        : ExposureParameter = ... # 0x5
    TorchPower               : ExposureParameter = ... # 0x6
    SpotMeteringPoint        : ExposureParameter = ... # 0x7
    ExposureMode             : ExposureParameter = ... # 0x8
    MeteringMode             : ExposureParameter = ... # 0x9
    ExtendedExposureParameter: ExposureParameter = ... # 0x3e8

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def actualValue(self, parameter:PySide2.QtMultimedia.QCameraExposureControl.ExposureParameter) -> typing.Any: ...
    def isParameterSupported(self, parameter:PySide2.QtMultimedia.QCameraExposureControl.ExposureParameter) -> bool: ...
    def requestedValue(self, parameter:PySide2.QtMultimedia.QCameraExposureControl.ExposureParameter) -> typing.Any: ...
    def setValue(self, parameter:PySide2.QtMultimedia.QCameraExposureControl.ExposureParameter, value:typing.Any) -> bool: ...


class QCameraFeedbackControl(PySide2.QtMultimedia.QMediaControl):

    class EventType(object): ...
    ViewfinderStarted        : EventType = ... # 0x1
    ViewfinderStopped        : EventType = ... # 0x2
    ImageCaptured            : EventType = ... # 0x3
    ImageSaved               : EventType = ... # 0x4
    ImageError               : EventType = ... # 0x5
    RecordingStarted         : EventType = ... # 0x6
    RecordingInProgress      : EventType = ... # 0x7
    RecordingStopped         : EventType = ... # 0x8
    AutoFocusInProgress      : EventType = ... # 0x9
    AutoFocusLocked          : EventType = ... # 0xa
    AutoFocusFailed          : EventType = ... # 0xb

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def isEventFeedbackEnabled(self, arg__1:PySide2.QtMultimedia.QCameraFeedbackControl.EventType) -> bool: ...
    def isEventFeedbackLocked(self, arg__1:PySide2.QtMultimedia.QCameraFeedbackControl.EventType) -> bool: ...
    def resetEventFeedback(self, arg__1:PySide2.QtMultimedia.QCameraFeedbackControl.EventType): ...
    def setEventFeedbackEnabled(self, arg__1:PySide2.QtMultimedia.QCameraFeedbackControl.EventType, arg__2:bool) -> bool: ...
    def setEventFeedbackSound(self, arg__1:PySide2.QtMultimedia.QCameraFeedbackControl.EventType, filePath:str) -> bool: ...


class QCameraFocusZone(Shiboken.Object):

    class FocusZoneStatus(object): ...
    Invalid                  : FocusZoneStatus = ... # 0x0
    Unused                   : FocusZoneStatus = ... # 0x1
    Selected                 : FocusZoneStatus = ... # 0x2
    Focused                  : FocusZoneStatus = ... # 0x3

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, area:PySide2.QtCore.QRectF, status:PySide2.QtMultimedia.QCameraFocusZone.FocusZoneStatus=...): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QCameraFocusZone): ...

    def __copy__(self): ...
    def area(self) -> PySide2.QtCore.QRectF: ...
    def isValid(self) -> bool: ...
    def setStatus(self, status:PySide2.QtMultimedia.QCameraFocusZone.FocusZoneStatus): ...
    def status(self) -> PySide2.QtMultimedia.QCameraFocusZone.FocusZoneStatus: ...


class QCameraImageCapture(PySide2.QtCore.QObject, PySide2.QtMultimedia.QMediaBindableInterface):

    class CaptureDestination(object): ...
    CaptureToFile            : CaptureDestination = ... # 0x1
    CaptureToBuffer          : CaptureDestination = ... # 0x2

    class CaptureDestinations(object): ...

    class DriveMode(object): ...
    SingleImageCapture       : DriveMode = ... # 0x0

    class Error(object): ...
    NoError                  : Error = ... # 0x0
    NotReadyError            : Error = ... # 0x1
    ResourceError            : Error = ... # 0x2
    OutOfSpaceError          : Error = ... # 0x3
    NotSupportedFeatureError : Error = ... # 0x4
    FormatError              : Error = ... # 0x5

    def __init__(self, mediaObject:PySide2.QtMultimedia.QMediaObject, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def availability(self) -> PySide2.QtMultimedia.QMultimedia.AvailabilityStatus: ...
    def bufferFormat(self) -> PySide2.QtMultimedia.QVideoFrame.PixelFormat: ...
    def cancelCapture(self): ...
    def capture(self, location:str=...) -> int: ...
    def captureDestination(self) -> PySide2.QtMultimedia.QCameraImageCapture.CaptureDestinations: ...
    def encodingSettings(self) -> PySide2.QtMultimedia.QImageEncoderSettings: ...
    def error(self) -> PySide2.QtMultimedia.QCameraImageCapture.Error: ...
    def errorString(self) -> str: ...
    def imageCodecDescription(self, codecName:str) -> str: ...
    def isAvailable(self) -> bool: ...
    def isCaptureDestinationSupported(self, destination:PySide2.QtMultimedia.QCameraImageCapture.CaptureDestinations) -> bool: ...
    def isReadyForCapture(self) -> bool: ...
    def mediaObject(self) -> PySide2.QtMultimedia.QMediaObject: ...
    def setBufferFormat(self, format:PySide2.QtMultimedia.QVideoFrame.PixelFormat): ...
    def setCaptureDestination(self, destination:PySide2.QtMultimedia.QCameraImageCapture.CaptureDestinations): ...
    def setEncodingSettings(self, settings:PySide2.QtMultimedia.QImageEncoderSettings): ...
    def setMediaObject(self, arg__1:PySide2.QtMultimedia.QMediaObject) -> bool: ...
    def supportedBufferFormats(self) -> typing.List: ...
    def supportedImageCodecs(self) -> typing.List: ...


class QCameraImageCaptureControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def cancelCapture(self): ...
    def capture(self, fileName:str) -> int: ...
    def driveMode(self) -> PySide2.QtMultimedia.QCameraImageCapture.DriveMode: ...
    def isReadyForCapture(self) -> bool: ...
    def setDriveMode(self, mode:PySide2.QtMultimedia.QCameraImageCapture.DriveMode): ...


class QCameraImageProcessingControl(PySide2.QtMultimedia.QMediaControl):

    class ProcessingParameter(object): ...
    WhiteBalancePreset       : ProcessingParameter = ... # 0x0
    ColorTemperature         : ProcessingParameter = ... # 0x1
    Contrast                 : ProcessingParameter = ... # 0x2
    Saturation               : ProcessingParameter = ... # 0x3
    Brightness               : ProcessingParameter = ... # 0x4
    Sharpening               : ProcessingParameter = ... # 0x5
    Denoising                : ProcessingParameter = ... # 0x6
    ContrastAdjustment       : ProcessingParameter = ... # 0x7
    SaturationAdjustment     : ProcessingParameter = ... # 0x8
    BrightnessAdjustment     : ProcessingParameter = ... # 0x9
    SharpeningAdjustment     : ProcessingParameter = ... # 0xa
    DenoisingAdjustment      : ProcessingParameter = ... # 0xb
    ColorFilter              : ProcessingParameter = ... # 0xc
    ExtendedParameter        : ProcessingParameter = ... # 0x3e8

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def isParameterSupported(self, arg__1:PySide2.QtMultimedia.QCameraImageProcessingControl.ProcessingParameter) -> bool: ...
    def isParameterValueSupported(self, parameter:PySide2.QtMultimedia.QCameraImageProcessingControl.ProcessingParameter, value:typing.Any) -> bool: ...
    def parameter(self, parameter:PySide2.QtMultimedia.QCameraImageProcessingControl.ProcessingParameter) -> typing.Any: ...
    def setParameter(self, parameter:PySide2.QtMultimedia.QCameraImageProcessingControl.ProcessingParameter, value:typing.Any): ...


class QCameraInfo(Shiboken.Object):

    @typing.overload
    def __init__(self, camera:PySide2.QtMultimedia.QCamera): ...
    @typing.overload
    def __init__(self, name:PySide2.QtCore.QByteArray=...): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QCameraInfo): ...

    def __copy__(self): ...
    @staticmethod
    def availableCameras(position:PySide2.QtMultimedia.QCamera.Position=...) -> typing.List: ...
    @staticmethod
    def defaultCamera() -> PySide2.QtMultimedia.QCameraInfo: ...
    def description(self) -> str: ...
    def deviceName(self) -> str: ...
    def isNull(self) -> bool: ...
    def orientation(self) -> int: ...
    def position(self) -> PySide2.QtMultimedia.QCamera.Position: ...


class QCameraInfoControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def cameraOrientation(self, deviceName:str) -> int: ...
    def cameraPosition(self, deviceName:str) -> PySide2.QtMultimedia.QCamera.Position: ...


class QCameraLocksControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def lockStatus(self, lock:PySide2.QtMultimedia.QCamera.LockType) -> PySide2.QtMultimedia.QCamera.LockStatus: ...
    def searchAndLock(self, locks:PySide2.QtMultimedia.QCamera.LockTypes): ...
    def supportedLocks(self) -> PySide2.QtMultimedia.QCamera.LockTypes: ...
    def unlock(self, locks:PySide2.QtMultimedia.QCamera.LockTypes): ...


class QCameraViewfinderSettings(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QCameraViewfinderSettings): ...

    def __copy__(self): ...
    def isNull(self) -> bool: ...
    def maximumFrameRate(self) -> float: ...
    def minimumFrameRate(self) -> float: ...
    def pixelAspectRatio(self) -> PySide2.QtCore.QSize: ...
    def pixelFormat(self) -> PySide2.QtMultimedia.QVideoFrame.PixelFormat: ...
    def resolution(self) -> PySide2.QtCore.QSize: ...
    def setMaximumFrameRate(self, rate:float): ...
    def setMinimumFrameRate(self, rate:float): ...
    @typing.overload
    def setPixelAspectRatio(self, horizontal:int, vertical:int): ...
    @typing.overload
    def setPixelAspectRatio(self, ratio:PySide2.QtCore.QSize): ...
    def setPixelFormat(self, format:PySide2.QtMultimedia.QVideoFrame.PixelFormat): ...
    @typing.overload
    def setResolution(self, arg__1:PySide2.QtCore.QSize): ...
    @typing.overload
    def setResolution(self, width:int, height:int): ...
    def swap(self, other:PySide2.QtMultimedia.QCameraViewfinderSettings): ...


class QCameraViewfinderSettingsControl(PySide2.QtMultimedia.QMediaControl):

    class ViewfinderParameter(object): ...
    Resolution               : ViewfinderParameter = ... # 0x0
    PixelAspectRatio         : ViewfinderParameter = ... # 0x1
    MinimumFrameRate         : ViewfinderParameter = ... # 0x2
    MaximumFrameRate         : ViewfinderParameter = ... # 0x3
    PixelFormat              : ViewfinderParameter = ... # 0x4
    UserParameter            : ViewfinderParameter = ... # 0x3e8

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def isViewfinderParameterSupported(self, parameter:PySide2.QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter) -> bool: ...
    def setViewfinderParameter(self, parameter:PySide2.QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter, value:typing.Any): ...
    def viewfinderParameter(self, parameter:PySide2.QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter) -> typing.Any: ...


class QCameraViewfinderSettingsControl2(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def setViewfinderSettings(self, settings:PySide2.QtMultimedia.QCameraViewfinderSettings): ...
    def supportedViewfinderSettings(self) -> typing.List: ...
    def viewfinderSettings(self) -> PySide2.QtMultimedia.QCameraViewfinderSettings: ...


class QCameraZoomControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def currentDigitalZoom(self) -> float: ...
    def currentOpticalZoom(self) -> float: ...
    def maximumDigitalZoom(self) -> float: ...
    def maximumOpticalZoom(self) -> float: ...
    def requestedDigitalZoom(self) -> float: ...
    def requestedOpticalZoom(self) -> float: ...
    def zoomTo(self, optical:float, digital:float): ...


class QCustomAudioRoleControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def customAudioRole(self) -> str: ...
    def setCustomAudioRole(self, role:str): ...
    def supportedCustomAudioRoles(self) -> typing.List: ...


class QImageEncoderControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def imageCodecDescription(self, codec:str) -> str: ...
    def imageSettings(self) -> PySide2.QtMultimedia.QImageEncoderSettings: ...
    def setImageSettings(self, settings:PySide2.QtMultimedia.QImageEncoderSettings): ...
    def supportedImageCodecs(self) -> typing.List: ...


class QImageEncoderSettings(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QImageEncoderSettings): ...

    def __copy__(self): ...
    def codec(self) -> str: ...
    def encodingOption(self, option:str) -> typing.Any: ...
    def encodingOptions(self) -> typing.Dict: ...
    def isNull(self) -> bool: ...
    def quality(self) -> PySide2.QtMultimedia.QMultimedia.EncodingQuality: ...
    def resolution(self) -> PySide2.QtCore.QSize: ...
    def setCodec(self, arg__1:str): ...
    def setEncodingOption(self, option:str, value:typing.Any): ...
    def setEncodingOptions(self, options:typing.Dict): ...
    def setQuality(self, quality:PySide2.QtMultimedia.QMultimedia.EncodingQuality): ...
    @typing.overload
    def setResolution(self, arg__1:PySide2.QtCore.QSize): ...
    @typing.overload
    def setResolution(self, width:int, height:int): ...


class QMediaAudioProbeControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...


class QMediaAvailabilityControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def availability(self) -> PySide2.QtMultimedia.QMultimedia.AvailabilityStatus: ...


class QMediaBindableInterface(Shiboken.Object):

    def __init__(self): ...

    def mediaObject(self) -> PySide2.QtMultimedia.QMediaObject: ...
    def setMediaObject(self, object:PySide2.QtMultimedia.QMediaObject) -> bool: ...


class QMediaContainerControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def containerDescription(self, formatMimeType:str) -> str: ...
    def containerFormat(self) -> str: ...
    def setContainerFormat(self, format:str): ...
    def supportedContainers(self) -> typing.List: ...


class QMediaContent(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, contentRequest:PySide2.QtNetwork.QNetworkRequest): ...
    @typing.overload
    def __init__(self, contentResource:PySide2.QtMultimedia.QMediaResource): ...
    @typing.overload
    def __init__(self, contentUrl:PySide2.QtCore.QUrl): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QMediaContent): ...
    @typing.overload
    def __init__(self, playlist:PySide2.QtMultimedia.QMediaPlaylist, contentUrl:PySide2.QtCore.QUrl=..., takeOwnership:bool=...): ...
    @typing.overload
    def __init__(self, resources:typing.List): ...

    def __copy__(self): ...
    def canonicalRequest(self) -> PySide2.QtNetwork.QNetworkRequest: ...
    def canonicalResource(self) -> PySide2.QtMultimedia.QMediaResource: ...
    def canonicalUrl(self) -> PySide2.QtCore.QUrl: ...
    def isNull(self) -> bool: ...
    def playlist(self) -> PySide2.QtMultimedia.QMediaPlaylist: ...
    def resources(self) -> typing.List: ...


class QMediaControl(PySide2.QtCore.QObject):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...


class QMediaGaplessPlaybackControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def crossfadeTime(self) -> float: ...
    def isCrossfadeSupported(self) -> bool: ...
    def nextMedia(self) -> PySide2.QtMultimedia.QMediaContent: ...
    def setCrossfadeTime(self, crossfadeTime:float): ...
    def setNextMedia(self, media:PySide2.QtMultimedia.QMediaContent): ...


class QMediaNetworkAccessControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def currentConfiguration(self) -> PySide2.QtNetwork.QNetworkConfiguration: ...
    def setConfigurations(self, configuration:typing.List): ...


class QMediaObject(PySide2.QtCore.QObject):

    def __init__(self, parent:PySide2.QtCore.QObject, service:PySide2.QtMultimedia.QMediaService): ...

    def addPropertyWatch(self, name:PySide2.QtCore.QByteArray): ...
    def availability(self) -> PySide2.QtMultimedia.QMultimedia.AvailabilityStatus: ...
    def availableMetaData(self) -> typing.List: ...
    def bind(self, arg__1:PySide2.QtCore.QObject) -> bool: ...
    def isAvailable(self) -> bool: ...
    def isMetaDataAvailable(self) -> bool: ...
    def metaData(self, key:str) -> typing.Any: ...
    def notifyInterval(self) -> int: ...
    def removePropertyWatch(self, name:PySide2.QtCore.QByteArray): ...
    def service(self) -> PySide2.QtMultimedia.QMediaService: ...
    def setNotifyInterval(self, milliSeconds:int): ...
    def unbind(self, arg__1:PySide2.QtCore.QObject): ...


class QMediaPlayer(PySide2.QtMultimedia.QMediaObject):

    class Error(object): ...
    NoError                  : Error = ... # 0x0
    ResourceError            : Error = ... # 0x1
    FormatError              : Error = ... # 0x2
    NetworkError             : Error = ... # 0x3
    AccessDeniedError        : Error = ... # 0x4
    ServiceMissingError      : Error = ... # 0x5
    MediaIsPlaylist          : Error = ... # 0x6

    class Flag(object): ...
    LowLatency               : Flag = ... # 0x1
    StreamPlayback           : Flag = ... # 0x2
    VideoSurface             : Flag = ... # 0x4

    class Flags(object): ...

    class MediaStatus(object): ...
    UnknownMediaStatus       : MediaStatus = ... # 0x0
    NoMedia                  : MediaStatus = ... # 0x1
    LoadingMedia             : MediaStatus = ... # 0x2
    LoadedMedia              : MediaStatus = ... # 0x3
    StalledMedia             : MediaStatus = ... # 0x4
    BufferingMedia           : MediaStatus = ... # 0x5
    BufferedMedia            : MediaStatus = ... # 0x6
    EndOfMedia               : MediaStatus = ... # 0x7
    InvalidMedia             : MediaStatus = ... # 0x8

    class State(object): ...
    StoppedState             : State = ... # 0x0
    PlayingState             : State = ... # 0x1
    PausedState              : State = ... # 0x2

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=..., flags:PySide2.QtMultimedia.QMediaPlayer.Flags=...): ...

    def audioRole(self) -> PySide2.QtMultimedia.QAudio.Role: ...
    def availability(self) -> PySide2.QtMultimedia.QMultimedia.AvailabilityStatus: ...
    def bind(self, arg__1:PySide2.QtCore.QObject) -> bool: ...
    def bufferStatus(self) -> int: ...
    def currentMedia(self) -> PySide2.QtMultimedia.QMediaContent: ...
    def currentNetworkConfiguration(self) -> PySide2.QtNetwork.QNetworkConfiguration: ...
    def customAudioRole(self) -> str: ...
    def duration(self) -> int: ...
    def error(self) -> PySide2.QtMultimedia.QMediaPlayer.Error: ...
    def errorString(self) -> str: ...
    @staticmethod
    def hasSupport(mimeType:str, codecs:typing.List=..., flags:PySide2.QtMultimedia.QMediaPlayer.Flags=...) -> PySide2.QtMultimedia.QMultimedia.SupportEstimate: ...
    def isAudioAvailable(self) -> bool: ...
    def isMuted(self) -> bool: ...
    def isSeekable(self) -> bool: ...
    def isVideoAvailable(self) -> bool: ...
    def media(self) -> PySide2.QtMultimedia.QMediaContent: ...
    def mediaStatus(self) -> PySide2.QtMultimedia.QMediaPlayer.MediaStatus: ...
    def mediaStream(self) -> PySide2.QtCore.QIODevice: ...
    def pause(self): ...
    def play(self): ...
    def playbackRate(self) -> float: ...
    def playlist(self) -> PySide2.QtMultimedia.QMediaPlaylist: ...
    def position(self) -> int: ...
    def setAudioRole(self, audioRole:PySide2.QtMultimedia.QAudio.Role): ...
    def setCustomAudioRole(self, audioRole:str): ...
    def setMedia(self, media:PySide2.QtMultimedia.QMediaContent, stream:typing.Optional[PySide2.QtCore.QIODevice]=...): ...
    def setMuted(self, muted:bool): ...
    def setNetworkConfigurations(self, configurations:typing.List): ...
    def setPlaybackRate(self, rate:float): ...
    def setPlaylist(self, playlist:PySide2.QtMultimedia.QMediaPlaylist): ...
    def setPosition(self, position:int): ...
    @typing.overload
    def setVideoOutput(self, arg__1:PySide2.QtMultimediaWidgets.QGraphicsVideoItem): ...
    @typing.overload
    def setVideoOutput(self, arg__1:PySide2.QtMultimediaWidgets.QVideoWidget): ...
    @typing.overload
    def setVideoOutput(self, surface:PySide2.QtMultimedia.QAbstractVideoSurface): ...
    def setVolume(self, volume:int): ...
    def state(self) -> PySide2.QtMultimedia.QMediaPlayer.State: ...
    def stop(self): ...
    def supportedAudioRoles(self) -> typing.List: ...
    def supportedCustomAudioRoles(self) -> typing.List: ...
    @staticmethod
    def supportedMimeTypes(flags:PySide2.QtMultimedia.QMediaPlayer.Flags=...) -> typing.List: ...
    def unbind(self, arg__1:PySide2.QtCore.QObject): ...
    def volume(self) -> int: ...


class QMediaPlayerControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def availablePlaybackRanges(self) -> PySide2.QtMultimedia.QMediaTimeRange: ...
    def bufferStatus(self) -> int: ...
    def duration(self) -> int: ...
    def isAudioAvailable(self) -> bool: ...
    def isMuted(self) -> bool: ...
    def isSeekable(self) -> bool: ...
    def isVideoAvailable(self) -> bool: ...
    def media(self) -> PySide2.QtMultimedia.QMediaContent: ...
    def mediaStatus(self) -> PySide2.QtMultimedia.QMediaPlayer.MediaStatus: ...
    def mediaStream(self) -> PySide2.QtCore.QIODevice: ...
    def pause(self): ...
    def play(self): ...
    def playbackRate(self) -> float: ...
    def position(self) -> int: ...
    def setMedia(self, media:PySide2.QtMultimedia.QMediaContent, stream:PySide2.QtCore.QIODevice): ...
    def setMuted(self, mute:bool): ...
    def setPlaybackRate(self, rate:float): ...
    def setPosition(self, position:int): ...
    def setVolume(self, volume:int): ...
    def state(self) -> PySide2.QtMultimedia.QMediaPlayer.State: ...
    def stop(self): ...
    def volume(self) -> int: ...


class QMediaPlaylist(PySide2.QtCore.QObject, PySide2.QtMultimedia.QMediaBindableInterface):

    class Error(object): ...
    NoError                  : Error = ... # 0x0
    FormatError              : Error = ... # 0x1
    FormatNotSupportedError  : Error = ... # 0x2
    NetworkError             : Error = ... # 0x3
    AccessDeniedError        : Error = ... # 0x4

    class PlaybackMode(object): ...
    CurrentItemOnce          : PlaybackMode = ... # 0x0
    CurrentItemInLoop        : PlaybackMode = ... # 0x1
    Sequential               : PlaybackMode = ... # 0x2
    Loop                     : PlaybackMode = ... # 0x3
    Random                   : PlaybackMode = ... # 0x4

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    @typing.overload
    def addMedia(self, content:PySide2.QtMultimedia.QMediaContent) -> bool: ...
    @typing.overload
    def addMedia(self, items:typing.List) -> bool: ...
    def clear(self) -> bool: ...
    def currentIndex(self) -> int: ...
    def currentMedia(self) -> PySide2.QtMultimedia.QMediaContent: ...
    def error(self) -> PySide2.QtMultimedia.QMediaPlaylist.Error: ...
    def errorString(self) -> str: ...
    @typing.overload
    def insertMedia(self, index:int, content:PySide2.QtMultimedia.QMediaContent) -> bool: ...
    @typing.overload
    def insertMedia(self, index:int, items:typing.List) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isReadOnly(self) -> bool: ...
    @typing.overload
    def load(self, device:PySide2.QtCore.QIODevice, format:typing.Optional[str]=...): ...
    @typing.overload
    def load(self, location:PySide2.QtCore.QUrl, format:typing.Optional[str]=...): ...
    @typing.overload
    def load(self, request:PySide2.QtNetwork.QNetworkRequest, format:typing.Optional[str]=...): ...
    def media(self, index:int) -> PySide2.QtMultimedia.QMediaContent: ...
    def mediaCount(self) -> int: ...
    def mediaObject(self) -> PySide2.QtMultimedia.QMediaObject: ...
    def moveMedia(self, from_:int, to:int) -> bool: ...
    def next(self): ...
    def nextIndex(self, steps:int=...) -> int: ...
    def playbackMode(self) -> PySide2.QtMultimedia.QMediaPlaylist.PlaybackMode: ...
    def previous(self): ...
    def previousIndex(self, steps:int=...) -> int: ...
    @typing.overload
    def removeMedia(self, pos:int) -> bool: ...
    @typing.overload
    def removeMedia(self, start:int, end:int) -> bool: ...
    @typing.overload
    def save(self, device:PySide2.QtCore.QIODevice, format:str) -> bool: ...
    @typing.overload
    def save(self, location:PySide2.QtCore.QUrl, format:typing.Optional[str]=...) -> bool: ...
    def setCurrentIndex(self, index:int): ...
    def setMediaObject(self, object:PySide2.QtMultimedia.QMediaObject) -> bool: ...
    def setPlaybackMode(self, mode:PySide2.QtMultimedia.QMediaPlaylist.PlaybackMode): ...
    def shuffle(self): ...


class QMediaRecorder(PySide2.QtCore.QObject, PySide2.QtMultimedia.QMediaBindableInterface):

    class Error(object): ...
    NoError                  : Error = ... # 0x0
    ResourceError            : Error = ... # 0x1
    FormatError              : Error = ... # 0x2
    OutOfSpaceError          : Error = ... # 0x3

    class State(object): ...
    StoppedState             : State = ... # 0x0
    RecordingState           : State = ... # 0x1
    PausedState              : State = ... # 0x2

    class Status(object): ...
    UnavailableStatus        : Status = ... # 0x0
    UnloadedStatus           : Status = ... # 0x1
    LoadingStatus            : Status = ... # 0x2
    LoadedStatus             : Status = ... # 0x3
    StartingStatus           : Status = ... # 0x4
    RecordingStatus          : Status = ... # 0x5
    PausedStatus             : Status = ... # 0x6
    FinalizingStatus         : Status = ... # 0x7

    def __init__(self, mediaObject:PySide2.QtMultimedia.QMediaObject, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def actualLocation(self) -> PySide2.QtCore.QUrl: ...
    def audioCodecDescription(self, codecName:str) -> str: ...
    def audioSettings(self) -> PySide2.QtMultimedia.QAudioEncoderSettings: ...
    def availability(self) -> PySide2.QtMultimedia.QMultimedia.AvailabilityStatus: ...
    def availableMetaData(self) -> typing.List: ...
    def containerDescription(self, format:str) -> str: ...
    def containerFormat(self) -> str: ...
    def duration(self) -> int: ...
    def error(self) -> PySide2.QtMultimedia.QMediaRecorder.Error: ...
    def errorString(self) -> str: ...
    def isAvailable(self) -> bool: ...
    def isMetaDataAvailable(self) -> bool: ...
    def isMetaDataWritable(self) -> bool: ...
    def isMuted(self) -> bool: ...
    def mediaObject(self) -> PySide2.QtMultimedia.QMediaObject: ...
    def metaData(self, key:str) -> typing.Any: ...
    def outputLocation(self) -> PySide2.QtCore.QUrl: ...
    def pause(self): ...
    def record(self): ...
    def setAudioSettings(self, audioSettings:PySide2.QtMultimedia.QAudioEncoderSettings): ...
    def setContainerFormat(self, container:str): ...
    def setEncodingSettings(self, audioSettings:PySide2.QtMultimedia.QAudioEncoderSettings, videoSettings:PySide2.QtMultimedia.QVideoEncoderSettings=..., containerMimeType:str=...): ...
    def setMediaObject(self, object:PySide2.QtMultimedia.QMediaObject) -> bool: ...
    def setMetaData(self, key:str, value:typing.Any): ...
    def setMuted(self, muted:bool): ...
    def setOutputLocation(self, location:PySide2.QtCore.QUrl) -> bool: ...
    def setVideoSettings(self, videoSettings:PySide2.QtMultimedia.QVideoEncoderSettings): ...
    def setVolume(self, volume:float): ...
    def state(self) -> PySide2.QtMultimedia.QMediaRecorder.State: ...
    def status(self) -> PySide2.QtMultimedia.QMediaRecorder.Status: ...
    def stop(self): ...
    def supportedAudioCodecs(self) -> typing.List: ...
    def supportedContainers(self) -> typing.List: ...
    def supportedVideoCodecs(self) -> typing.List: ...
    def videoCodecDescription(self, codecName:str) -> str: ...
    def videoSettings(self) -> PySide2.QtMultimedia.QVideoEncoderSettings: ...
    def volume(self) -> float: ...


class QMediaRecorderControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def applySettings(self): ...
    def duration(self) -> int: ...
    def isMuted(self) -> bool: ...
    def outputLocation(self) -> PySide2.QtCore.QUrl: ...
    def setMuted(self, muted:bool): ...
    def setOutputLocation(self, location:PySide2.QtCore.QUrl) -> bool: ...
    def setState(self, state:PySide2.QtMultimedia.QMediaRecorder.State): ...
    def setVolume(self, volume:float): ...
    def state(self) -> PySide2.QtMultimedia.QMediaRecorder.State: ...
    def status(self) -> PySide2.QtMultimedia.QMediaRecorder.Status: ...
    def volume(self) -> float: ...


class QMediaResource(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QMediaResource): ...
    @typing.overload
    def __init__(self, request:PySide2.QtNetwork.QNetworkRequest, mimeType:str=...): ...
    @typing.overload
    def __init__(self, url:PySide2.QtCore.QUrl, mimeType:str=...): ...

    def __copy__(self): ...
    def audioBitRate(self) -> int: ...
    def audioCodec(self) -> str: ...
    def channelCount(self) -> int: ...
    def dataSize(self) -> int: ...
    def isNull(self) -> bool: ...
    def language(self) -> str: ...
    def mimeType(self) -> str: ...
    def request(self) -> PySide2.QtNetwork.QNetworkRequest: ...
    def resolution(self) -> PySide2.QtCore.QSize: ...
    def sampleRate(self) -> int: ...
    def setAudioBitRate(self, rate:int): ...
    def setAudioCodec(self, codec:str): ...
    def setChannelCount(self, channels:int): ...
    def setDataSize(self, size:int): ...
    def setLanguage(self, language:str): ...
    @typing.overload
    def setResolution(self, resolution:PySide2.QtCore.QSize): ...
    @typing.overload
    def setResolution(self, width:int, height:int): ...
    def setSampleRate(self, frequency:int): ...
    def setVideoBitRate(self, rate:int): ...
    def setVideoCodec(self, codec:str): ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def videoBitRate(self) -> int: ...
    def videoCodec(self) -> str: ...


class QMediaService(PySide2.QtCore.QObject):

    def __init__(self, parent:PySide2.QtCore.QObject): ...

    def releaseControl(self, control:PySide2.QtMultimedia.QMediaControl): ...
    def requestControl(self, name:str) -> PySide2.QtMultimedia.QMediaControl: ...


class QMediaServiceCameraInfoInterface(Shiboken.Object):

    def __init__(self): ...

    def cameraOrientation(self, device:PySide2.QtCore.QByteArray) -> int: ...
    def cameraPosition(self, device:PySide2.QtCore.QByteArray) -> PySide2.QtMultimedia.QCamera.Position: ...


class QMediaServiceDefaultDeviceInterface(Shiboken.Object):

    def __init__(self): ...

    def defaultDevice(self, service:PySide2.QtCore.QByteArray) -> PySide2.QtCore.QByteArray: ...


class QMediaServiceFeaturesInterface(Shiboken.Object):

    def __init__(self): ...

    def supportedFeatures(self, service:PySide2.QtCore.QByteArray) -> PySide2.QtMultimedia.QMediaServiceProviderHint.Features: ...


class QMediaServiceProviderHint(Shiboken.Object):

    class Feature(object): ...
    LowLatencyPlayback       : Feature = ... # 0x1
    RecordingSupport         : Feature = ... # 0x2
    StreamPlayback           : Feature = ... # 0x4
    VideoSurface             : Feature = ... # 0x8

    class Features(object): ...

    class Type(object): ...
    Null                     : Type = ... # 0x0
    ContentType              : Type = ... # 0x1
    Device                   : Type = ... # 0x2
    SupportedFeatures        : Type = ... # 0x3
    CameraPosition           : Type = ... # 0x4

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, device:PySide2.QtCore.QByteArray): ...
    @typing.overload
    def __init__(self, features:PySide2.QtMultimedia.QMediaServiceProviderHint.Features): ...
    @typing.overload
    def __init__(self, mimeType:str, codecs:typing.List): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QMediaServiceProviderHint): ...
    @typing.overload
    def __init__(self, position:PySide2.QtMultimedia.QCamera.Position): ...

    def __copy__(self): ...
    def cameraPosition(self) -> PySide2.QtMultimedia.QCamera.Position: ...
    def codecs(self) -> typing.List: ...
    def device(self) -> PySide2.QtCore.QByteArray: ...
    def features(self) -> PySide2.QtMultimedia.QMediaServiceProviderHint.Features: ...
    def isNull(self) -> bool: ...
    def mimeType(self) -> str: ...
    def type(self) -> PySide2.QtMultimedia.QMediaServiceProviderHint.Type: ...


class QMediaServiceSupportedDevicesInterface(Shiboken.Object):

    def __init__(self): ...

    def deviceDescription(self, service:PySide2.QtCore.QByteArray, device:PySide2.QtCore.QByteArray) -> str: ...
    def devices(self, service:PySide2.QtCore.QByteArray) -> typing.List: ...


class QMediaServiceSupportedFormatsInterface(Shiboken.Object):

    def __init__(self): ...

    def hasSupport(self, mimeType:str, codecs:typing.List) -> PySide2.QtMultimedia.QMultimedia.SupportEstimate: ...
    def supportedMimeTypes(self) -> typing.List: ...


class QMediaStreamsControl(PySide2.QtMultimedia.QMediaControl):

    class StreamType(object): ...
    UnknownStream            : StreamType = ... # 0x0
    VideoStream              : StreamType = ... # 0x1
    AudioStream              : StreamType = ... # 0x2
    SubPictureStream         : StreamType = ... # 0x3
    DataStream               : StreamType = ... # 0x4

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def isActive(self, streamNumber:int) -> bool: ...
    def metaData(self, streamNumber:int, key:str) -> typing.Any: ...
    def setActive(self, streamNumber:int, state:bool): ...
    def streamCount(self) -> int: ...
    def streamType(self, streamNumber:int) -> PySide2.QtMultimedia.QMediaStreamsControl.StreamType: ...


class QMediaTimeInterval(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arg__1:PySide2.QtMultimedia.QMediaTimeInterval): ...
    @typing.overload
    def __init__(self, start:int, end:int): ...

    def __copy__(self): ...
    def contains(self, time:int) -> bool: ...
    def end(self) -> int: ...
    def isNormal(self) -> bool: ...
    def normalized(self) -> PySide2.QtMultimedia.QMediaTimeInterval: ...
    def start(self) -> int: ...
    def translated(self, offset:int) -> PySide2.QtMultimedia.QMediaTimeInterval: ...


class QMediaTimeRange(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, arg__1:PySide2.QtMultimedia.QMediaTimeInterval): ...
    @typing.overload
    def __init__(self, range:PySide2.QtMultimedia.QMediaTimeRange): ...
    @typing.overload
    def __init__(self, start:int, end:int): ...

    def __add__(self, arg__2:PySide2.QtMultimedia.QMediaTimeRange) -> PySide2.QtMultimedia.QMediaTimeRange: ...
    def __copy__(self): ...
    @typing.overload
    def __iadd__(self, arg__1:PySide2.QtMultimedia.QMediaTimeInterval) -> PySide2.QtMultimedia.QMediaTimeRange: ...
    @typing.overload
    def __iadd__(self, arg__1:PySide2.QtMultimedia.QMediaTimeRange) -> PySide2.QtMultimedia.QMediaTimeRange: ...
    @typing.overload
    def __isub__(self, arg__1:PySide2.QtMultimedia.QMediaTimeInterval) -> PySide2.QtMultimedia.QMediaTimeRange: ...
    @typing.overload
    def __isub__(self, arg__1:PySide2.QtMultimedia.QMediaTimeRange) -> PySide2.QtMultimedia.QMediaTimeRange: ...
    def __sub__(self, arg__2:PySide2.QtMultimedia.QMediaTimeRange) -> PySide2.QtMultimedia.QMediaTimeRange: ...
    @typing.overload
    def addInterval(self, interval:PySide2.QtMultimedia.QMediaTimeInterval): ...
    @typing.overload
    def addInterval(self, start:int, end:int): ...
    def addTimeRange(self, arg__1:PySide2.QtMultimedia.QMediaTimeRange): ...
    def clear(self): ...
    def contains(self, time:int) -> bool: ...
    def earliestTime(self) -> int: ...
    def intervals(self) -> typing.List: ...
    def isContinuous(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def latestTime(self) -> int: ...
    @typing.overload
    def removeInterval(self, interval:PySide2.QtMultimedia.QMediaTimeInterval): ...
    @typing.overload
    def removeInterval(self, start:int, end:int): ...
    def removeTimeRange(self, arg__1:PySide2.QtMultimedia.QMediaTimeRange): ...


class QMediaVideoProbeControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...


class QMetaDataReaderControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def availableMetaData(self) -> typing.List: ...
    def isMetaDataAvailable(self) -> bool: ...
    def metaData(self, key:str) -> typing.Any: ...


class QMetaDataWriterControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def availableMetaData(self) -> typing.List: ...
    def isMetaDataAvailable(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def metaData(self, key:str) -> typing.Any: ...
    def setMetaData(self, key:str, value:typing.Any): ...


class QMultimedia(Shiboken.Object):

    class AvailabilityStatus(object): ...
    Available                : AvailabilityStatus = ... # 0x0
    ServiceMissing           : AvailabilityStatus = ... # 0x1
    Busy                     : AvailabilityStatus = ... # 0x2
    ResourceError            : AvailabilityStatus = ... # 0x3

    class EncodingMode(object): ...
    ConstantQualityEncoding  : EncodingMode = ... # 0x0
    ConstantBitRateEncoding  : EncodingMode = ... # 0x1
    AverageBitRateEncoding   : EncodingMode = ... # 0x2
    TwoPassEncoding          : EncodingMode = ... # 0x3

    class EncodingQuality(object): ...
    VeryLowQuality           : EncodingQuality = ... # 0x0
    LowQuality               : EncodingQuality = ... # 0x1
    NormalQuality            : EncodingQuality = ... # 0x2
    HighQuality              : EncodingQuality = ... # 0x3
    VeryHighQuality          : EncodingQuality = ... # 0x4

    class SupportEstimate(object): ...
    NotSupported             : SupportEstimate = ... # 0x0
    MaybeSupported           : SupportEstimate = ... # 0x1
    ProbablySupported        : SupportEstimate = ... # 0x2
    PreferredService         : SupportEstimate = ... # 0x3


class QRadioData(PySide2.QtCore.QObject, PySide2.QtMultimedia.QMediaBindableInterface):

    class Error(object): ...
    NoError                  : Error = ... # 0x0
    ResourceError            : Error = ... # 0x1
    OpenError                : Error = ... # 0x2
    OutOfRangeError          : Error = ... # 0x3

    class ProgramType(object): ...
    Undefined                : ProgramType = ... # 0x0
    News                     : ProgramType = ... # 0x1
    CurrentAffairs           : ProgramType = ... # 0x2
    Information              : ProgramType = ... # 0x3
    Sport                    : ProgramType = ... # 0x4
    Education                : ProgramType = ... # 0x5
    Drama                    : ProgramType = ... # 0x6
    Culture                  : ProgramType = ... # 0x7
    Science                  : ProgramType = ... # 0x8
    Varied                   : ProgramType = ... # 0x9
    PopMusic                 : ProgramType = ... # 0xa
    RockMusic                : ProgramType = ... # 0xb
    EasyListening            : ProgramType = ... # 0xc
    LightClassical           : ProgramType = ... # 0xd
    SeriousClassical         : ProgramType = ... # 0xe
    OtherMusic               : ProgramType = ... # 0xf
    Weather                  : ProgramType = ... # 0x10
    Finance                  : ProgramType = ... # 0x11
    ChildrensProgrammes      : ProgramType = ... # 0x12
    SocialAffairs            : ProgramType = ... # 0x13
    Religion                 : ProgramType = ... # 0x14
    PhoneIn                  : ProgramType = ... # 0x15
    Travel                   : ProgramType = ... # 0x16
    Leisure                  : ProgramType = ... # 0x17
    JazzMusic                : ProgramType = ... # 0x18
    CountryMusic             : ProgramType = ... # 0x19
    NationalMusic            : ProgramType = ... # 0x1a
    OldiesMusic              : ProgramType = ... # 0x1b
    FolkMusic                : ProgramType = ... # 0x1c
    Documentary              : ProgramType = ... # 0x1d
    AlarmTest                : ProgramType = ... # 0x1e
    Alarm                    : ProgramType = ... # 0x1f
    Talk                     : ProgramType = ... # 0x20
    ClassicRock              : ProgramType = ... # 0x21
    AdultHits                : ProgramType = ... # 0x22
    SoftRock                 : ProgramType = ... # 0x23
    Top40                    : ProgramType = ... # 0x24
    Soft                     : ProgramType = ... # 0x25
    Nostalgia                : ProgramType = ... # 0x26
    Classical                : ProgramType = ... # 0x27
    RhythmAndBlues           : ProgramType = ... # 0x28
    SoftRhythmAndBlues       : ProgramType = ... # 0x29
    Language                 : ProgramType = ... # 0x2a
    ReligiousMusic           : ProgramType = ... # 0x2b
    ReligiousTalk            : ProgramType = ... # 0x2c
    Personality              : ProgramType = ... # 0x2d
    Public                   : ProgramType = ... # 0x2e
    College                  : ProgramType = ... # 0x2f

    def __init__(self, mediaObject:PySide2.QtMultimedia.QMediaObject, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def availability(self) -> PySide2.QtMultimedia.QMultimedia.AvailabilityStatus: ...
    def error(self) -> PySide2.QtMultimedia.QRadioData.Error: ...
    def errorString(self) -> str: ...
    def isAlternativeFrequenciesEnabled(self) -> bool: ...
    def mediaObject(self) -> PySide2.QtMultimedia.QMediaObject: ...
    def programType(self) -> PySide2.QtMultimedia.QRadioData.ProgramType: ...
    def programTypeName(self) -> str: ...
    def radioText(self) -> str: ...
    def setAlternativeFrequenciesEnabled(self, enabled:bool): ...
    def setMediaObject(self, arg__1:PySide2.QtMultimedia.QMediaObject) -> bool: ...
    def stationId(self) -> str: ...
    def stationName(self) -> str: ...


class QRadioDataControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def error(self) -> PySide2.QtMultimedia.QRadioData.Error: ...
    def errorString(self) -> str: ...
    def isAlternativeFrequenciesEnabled(self) -> bool: ...
    def programType(self) -> PySide2.QtMultimedia.QRadioData.ProgramType: ...
    def programTypeName(self) -> str: ...
    def radioText(self) -> str: ...
    def setAlternativeFrequenciesEnabled(self, enabled:bool): ...
    def stationId(self) -> str: ...
    def stationName(self) -> str: ...


class QRadioTuner(PySide2.QtMultimedia.QMediaObject):

    class Band(object): ...
    AM                       : Band = ... # 0x0
    FM                       : Band = ... # 0x1
    SW                       : Band = ... # 0x2
    LW                       : Band = ... # 0x3
    FM2                      : Band = ... # 0x4

    class Error(object): ...
    NoError                  : Error = ... # 0x0
    ResourceError            : Error = ... # 0x1
    OpenError                : Error = ... # 0x2
    OutOfRangeError          : Error = ... # 0x3

    class SearchMode(object): ...
    SearchFast               : SearchMode = ... # 0x0
    SearchGetStationId       : SearchMode = ... # 0x1

    class State(object): ...
    ActiveState              : State = ... # 0x0
    StoppedState             : State = ... # 0x1

    class StereoMode(object): ...
    ForceStereo              : StereoMode = ... # 0x0
    ForceMono                : StereoMode = ... # 0x1
    Auto                     : StereoMode = ... # 0x2

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def availability(self) -> PySide2.QtMultimedia.QMultimedia.AvailabilityStatus: ...
    def band(self) -> PySide2.QtMultimedia.QRadioTuner.Band: ...
    def cancelSearch(self): ...
    def error(self) -> PySide2.QtMultimedia.QRadioTuner.Error: ...
    def errorString(self) -> str: ...
    def frequency(self) -> int: ...
    def frequencyRange(self, band:PySide2.QtMultimedia.QRadioTuner.Band) -> typing.Tuple: ...
    def frequencyStep(self, band:PySide2.QtMultimedia.QRadioTuner.Band) -> int: ...
    def isAntennaConnected(self) -> bool: ...
    def isBandSupported(self, b:PySide2.QtMultimedia.QRadioTuner.Band) -> bool: ...
    def isMuted(self) -> bool: ...
    def isSearching(self) -> bool: ...
    def isStereo(self) -> bool: ...
    def radioData(self) -> PySide2.QtMultimedia.QRadioData: ...
    def searchAllStations(self, searchMode:PySide2.QtMultimedia.QRadioTuner.SearchMode=...): ...
    def searchBackward(self): ...
    def searchForward(self): ...
    def setBand(self, band:PySide2.QtMultimedia.QRadioTuner.Band): ...
    def setFrequency(self, frequency:int): ...
    def setMuted(self, muted:bool): ...
    def setStereoMode(self, mode:PySide2.QtMultimedia.QRadioTuner.StereoMode): ...
    def setVolume(self, volume:int): ...
    def signalStrength(self) -> int: ...
    def start(self): ...
    def state(self) -> PySide2.QtMultimedia.QRadioTuner.State: ...
    def stereoMode(self) -> PySide2.QtMultimedia.QRadioTuner.StereoMode: ...
    def stop(self): ...
    def volume(self) -> int: ...


class QRadioTunerControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def band(self) -> PySide2.QtMultimedia.QRadioTuner.Band: ...
    def cancelSearch(self): ...
    def error(self) -> PySide2.QtMultimedia.QRadioTuner.Error: ...
    def errorString(self) -> str: ...
    def frequency(self) -> int: ...
    def frequencyRange(self, b:PySide2.QtMultimedia.QRadioTuner.Band) -> typing.Tuple: ...
    def frequencyStep(self, b:PySide2.QtMultimedia.QRadioTuner.Band) -> int: ...
    def isAntennaConnected(self) -> bool: ...
    def isBandSupported(self, b:PySide2.QtMultimedia.QRadioTuner.Band) -> bool: ...
    def isMuted(self) -> bool: ...
    def isSearching(self) -> bool: ...
    def isStereo(self) -> bool: ...
    def searchAllStations(self, searchMode:PySide2.QtMultimedia.QRadioTuner.SearchMode=...): ...
    def searchBackward(self): ...
    def searchForward(self): ...
    def setBand(self, b:PySide2.QtMultimedia.QRadioTuner.Band): ...
    def setFrequency(self, frequency:int): ...
    def setMuted(self, muted:bool): ...
    def setStereoMode(self, mode:PySide2.QtMultimedia.QRadioTuner.StereoMode): ...
    def setVolume(self, volume:int): ...
    def signalStrength(self) -> int: ...
    def start(self): ...
    def state(self) -> PySide2.QtMultimedia.QRadioTuner.State: ...
    def stereoMode(self) -> PySide2.QtMultimedia.QRadioTuner.StereoMode: ...
    def stop(self): ...
    def volume(self) -> int: ...


class QSound(PySide2.QtCore.QObject):

    class Loop(object): ...
    Infinite                 : Loop = ... # -0x1

    def __init__(self, filename:str, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def fileName(self) -> str: ...
    def isFinished(self) -> bool: ...
    def loops(self) -> int: ...
    def loopsRemaining(self) -> int: ...
    @typing.overload
    @staticmethod
    def play(): ...
    @typing.overload
    @staticmethod
    def play(filename:str): ...
    def setLoops(self, arg__1:int): ...
    def stop(self): ...


class QSoundEffect(PySide2.QtCore.QObject):

    class Loop(object): ...
    Infinite                 : Loop = ... # -0x2

    class Status(object): ...
    Null                     : Status = ... # 0x0
    Loading                  : Status = ... # 0x1
    Ready                    : Status = ... # 0x2
    Error                    : Status = ... # 0x3

    @typing.overload
    def __init__(self, audioDevice:PySide2.QtMultimedia.QAudioDeviceInfo, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def category(self) -> str: ...
    def isLoaded(self) -> bool: ...
    def isMuted(self) -> bool: ...
    def isPlaying(self) -> bool: ...
    def loopCount(self) -> int: ...
    def loopsRemaining(self) -> int: ...
    def play(self): ...
    def setCategory(self, category:str): ...
    def setLoopCount(self, loopCount:int): ...
    def setMuted(self, muted:bool): ...
    def setSource(self, url:PySide2.QtCore.QUrl): ...
    def setVolume(self, volume:float): ...
    def source(self) -> PySide2.QtCore.QUrl: ...
    def status(self) -> PySide2.QtMultimedia.QSoundEffect.Status: ...
    def stop(self): ...
    @staticmethod
    def supportedMimeTypes() -> typing.List: ...
    def volume(self) -> float: ...


class QVideoDeviceSelectorControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def defaultDevice(self) -> int: ...
    def deviceCount(self) -> int: ...
    def deviceDescription(self, index:int) -> str: ...
    def deviceName(self, index:int) -> str: ...
    def selectedDevice(self) -> int: ...
    def setSelectedDevice(self, index:int): ...


class QVideoEncoderSettings(Shiboken.Object):

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QVideoEncoderSettings): ...

    def __copy__(self): ...
    def bitRate(self) -> int: ...
    def codec(self) -> str: ...
    def encodingMode(self) -> PySide2.QtMultimedia.QMultimedia.EncodingMode: ...
    def encodingOption(self, option:str) -> typing.Any: ...
    def encodingOptions(self) -> typing.Dict: ...
    def frameRate(self) -> float: ...
    def isNull(self) -> bool: ...
    def quality(self) -> PySide2.QtMultimedia.QMultimedia.EncodingQuality: ...
    def resolution(self) -> PySide2.QtCore.QSize: ...
    def setBitRate(self, bitrate:int): ...
    def setCodec(self, arg__1:str): ...
    def setEncodingMode(self, arg__1:PySide2.QtMultimedia.QMultimedia.EncodingMode): ...
    def setEncodingOption(self, option:str, value:typing.Any): ...
    def setEncodingOptions(self, options:typing.Dict): ...
    def setFrameRate(self, rate:float): ...
    def setQuality(self, quality:PySide2.QtMultimedia.QMultimedia.EncodingQuality): ...
    @typing.overload
    def setResolution(self, arg__1:PySide2.QtCore.QSize): ...
    @typing.overload
    def setResolution(self, width:int, height:int): ...


class QVideoEncoderSettingsControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def setVideoSettings(self, settings:PySide2.QtMultimedia.QVideoEncoderSettings): ...
    def supportedVideoCodecs(self) -> typing.List: ...
    def videoCodecDescription(self, codec:str) -> str: ...
    def videoSettings(self) -> PySide2.QtMultimedia.QVideoEncoderSettings: ...


class QVideoFilterRunnable(Shiboken.Object):

    class RunFlag(object): ...
    LastInChain              : RunFlag = ... # 0x1

    class RunFlags(object): ...

    def __init__(self): ...

    def run(self, input:PySide2.QtMultimedia.QVideoFrame, surfaceFormat:PySide2.QtMultimedia.QVideoSurfaceFormat, flags:PySide2.QtMultimedia.QVideoFilterRunnable.RunFlags) -> PySide2.QtMultimedia.QVideoFrame: ...


class QVideoFrame(Shiboken.Object):

    class FieldType(object): ...
    ProgressiveFrame         : FieldType = ... # 0x0
    TopField                 : FieldType = ... # 0x1
    BottomField              : FieldType = ... # 0x2
    InterlacedFrame          : FieldType = ... # 0x3

    class PixelFormat(object): ...
    Format_Invalid           : PixelFormat = ... # 0x0
    Format_ARGB32            : PixelFormat = ... # 0x1
    Format_ARGB32_Premultiplied: PixelFormat = ... # 0x2
    Format_RGB32             : PixelFormat = ... # 0x3
    Format_RGB24             : PixelFormat = ... # 0x4
    Format_RGB565            : PixelFormat = ... # 0x5
    Format_RGB555            : PixelFormat = ... # 0x6
    Format_ARGB8565_Premultiplied: PixelFormat = ... # 0x7
    Format_BGRA32            : PixelFormat = ... # 0x8
    Format_BGRA32_Premultiplied: PixelFormat = ... # 0x9
    Format_ABGR32            : PixelFormat = ... # 0xa
    Format_BGR32             : PixelFormat = ... # 0xb
    Format_BGR24             : PixelFormat = ... # 0xc
    Format_BGR565            : PixelFormat = ... # 0xd
    Format_BGR555            : PixelFormat = ... # 0xe
    Format_BGRA5658_Premultiplied: PixelFormat = ... # 0xf
    Format_AYUV444           : PixelFormat = ... # 0x10
    Format_AYUV444_Premultiplied: PixelFormat = ... # 0x11
    Format_YUV444            : PixelFormat = ... # 0x12
    Format_YUV420P           : PixelFormat = ... # 0x13
    Format_YV12              : PixelFormat = ... # 0x14
    Format_UYVY              : PixelFormat = ... # 0x15
    Format_YUYV              : PixelFormat = ... # 0x16
    Format_NV12              : PixelFormat = ... # 0x17
    Format_NV21              : PixelFormat = ... # 0x18
    Format_IMC1              : PixelFormat = ... # 0x19
    Format_IMC2              : PixelFormat = ... # 0x1a
    Format_IMC3              : PixelFormat = ... # 0x1b
    Format_IMC4              : PixelFormat = ... # 0x1c
    Format_Y8                : PixelFormat = ... # 0x1d
    Format_Y16               : PixelFormat = ... # 0x1e
    Format_Jpeg              : PixelFormat = ... # 0x1f
    Format_CameraRaw         : PixelFormat = ... # 0x20
    Format_AdobeDng          : PixelFormat = ... # 0x21
    NPixelFormats            : PixelFormat = ... # 0x22
    Format_User              : PixelFormat = ... # 0x3e8

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, buffer:PySide2.QtMultimedia.QAbstractVideoBuffer, size:PySide2.QtCore.QSize, format:PySide2.QtMultimedia.QVideoFrame.PixelFormat): ...
    @typing.overload
    def __init__(self, bytes:int, size:PySide2.QtCore.QSize, bytesPerLine:int, format:PySide2.QtMultimedia.QVideoFrame.PixelFormat): ...
    @typing.overload
    def __init__(self, image:PySide2.QtGui.QImage): ...
    @typing.overload
    def __init__(self, other:PySide2.QtMultimedia.QVideoFrame): ...

    def __copy__(self): ...
    def availableMetaData(self) -> typing.Dict: ...
    def bits(self) -> typing.Char: ...
    def buffer(self) -> PySide2.QtMultimedia.QAbstractVideoBuffer: ...
    @typing.overload
    def bytesPerLine(self) -> int: ...
    @typing.overload
    def bytesPerLine(self, plane:int) -> int: ...
    def endTime(self) -> int: ...
    def fieldType(self) -> PySide2.QtMultimedia.QVideoFrame.FieldType: ...
    def handle(self) -> typing.Any: ...
    def handleType(self) -> PySide2.QtMultimedia.QAbstractVideoBuffer.HandleType: ...
    def height(self) -> int: ...
    @staticmethod
    def imageFormatFromPixelFormat(format:PySide2.QtMultimedia.QVideoFrame.PixelFormat) -> PySide2.QtGui.QImage.Format: ...
    def isMapped(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isValid(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def map(self, mode:PySide2.QtMultimedia.QAbstractVideoBuffer.MapMode) -> bool: ...
    def mapMode(self) -> PySide2.QtMultimedia.QAbstractVideoBuffer.MapMode: ...
    def mappedBytes(self) -> int: ...
    def metaData(self, key:str) -> typing.Any: ...
    def pixelFormat(self) -> PySide2.QtMultimedia.QVideoFrame.PixelFormat: ...
    @staticmethod
    def pixelFormatFromImageFormat(format:PySide2.QtGui.QImage.Format) -> PySide2.QtMultimedia.QVideoFrame.PixelFormat: ...
    def planeCount(self) -> int: ...
    def setEndTime(self, time:int): ...
    def setFieldType(self, arg__1:PySide2.QtMultimedia.QVideoFrame.FieldType): ...
    def setMetaData(self, key:str, value:typing.Any): ...
    def setStartTime(self, time:int): ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def startTime(self) -> int: ...
    def unmap(self): ...
    def width(self) -> int: ...


class QVideoProbe(PySide2.QtCore.QObject):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def isActive(self) -> bool: ...
    @typing.overload
    def setSource(self, source:PySide2.QtMultimedia.QMediaObject) -> bool: ...
    @typing.overload
    def setSource(self, source:PySide2.QtMultimedia.QMediaRecorder) -> bool: ...


class QVideoRendererControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def setSurface(self, surface:PySide2.QtMultimedia.QAbstractVideoSurface): ...
    def surface(self) -> PySide2.QtMultimedia.QAbstractVideoSurface: ...


class QVideoSurfaceFormat(Shiboken.Object):

    class Direction(object): ...
    TopToBottom              : Direction = ... # 0x0
    BottomToTop              : Direction = ... # 0x1

    class YCbCrColorSpace(object): ...
    YCbCr_Undefined          : YCbCrColorSpace = ... # 0x0
    YCbCr_BT601              : YCbCrColorSpace = ... # 0x1
    YCbCr_BT709              : YCbCrColorSpace = ... # 0x2
    YCbCr_xvYCC601           : YCbCrColorSpace = ... # 0x3
    YCbCr_xvYCC709           : YCbCrColorSpace = ... # 0x4
    YCbCr_JPEG               : YCbCrColorSpace = ... # 0x5
    YCbCr_CustomMatrix       : YCbCrColorSpace = ... # 0x6

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, format:PySide2.QtMultimedia.QVideoSurfaceFormat): ...
    @typing.overload
    def __init__(self, size:PySide2.QtCore.QSize, pixelFormat:PySide2.QtMultimedia.QVideoFrame.PixelFormat, handleType:PySide2.QtMultimedia.QAbstractVideoBuffer.HandleType=...): ...

    def __copy__(self): ...
    def frameHeight(self) -> int: ...
    def frameRate(self) -> float: ...
    def frameSize(self) -> PySide2.QtCore.QSize: ...
    def frameWidth(self) -> int: ...
    def handleType(self) -> PySide2.QtMultimedia.QAbstractVideoBuffer.HandleType: ...
    def isMirrored(self) -> bool: ...
    def isValid(self) -> bool: ...
    def pixelAspectRatio(self) -> PySide2.QtCore.QSize: ...
    def pixelFormat(self) -> PySide2.QtMultimedia.QVideoFrame.PixelFormat: ...
    def property(self, name:str) -> typing.Any: ...
    def propertyNames(self) -> typing.List: ...
    def scanLineDirection(self) -> PySide2.QtMultimedia.QVideoSurfaceFormat.Direction: ...
    def setFrameRate(self, rate:float): ...
    @typing.overload
    def setFrameSize(self, size:PySide2.QtCore.QSize): ...
    @typing.overload
    def setFrameSize(self, width:int, height:int): ...
    def setMirrored(self, mirrored:bool): ...
    @typing.overload
    def setPixelAspectRatio(self, ratio:PySide2.QtCore.QSize): ...
    @typing.overload
    def setPixelAspectRatio(self, width:int, height:int): ...
    def setProperty(self, name:str, value:typing.Any): ...
    def setScanLineDirection(self, direction:PySide2.QtMultimedia.QVideoSurfaceFormat.Direction): ...
    def setViewport(self, viewport:PySide2.QtCore.QRect): ...
    def setYCbCrColorSpace(self, colorSpace:PySide2.QtMultimedia.QVideoSurfaceFormat.YCbCrColorSpace): ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def viewport(self) -> PySide2.QtCore.QRect: ...
    def yCbCrColorSpace(self) -> PySide2.QtMultimedia.QVideoSurfaceFormat.YCbCrColorSpace: ...


class QVideoWindowControl(PySide2.QtMultimedia.QMediaControl):

    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def aspectRatioMode(self) -> PySide2.QtCore.Qt.AspectRatioMode: ...
    def brightness(self) -> int: ...
    def contrast(self) -> int: ...
    def displayRect(self) -> PySide2.QtCore.QRect: ...
    def hue(self) -> int: ...
    def isFullScreen(self) -> bool: ...
    def nativeSize(self) -> PySide2.QtCore.QSize: ...
    def repaint(self): ...
    def saturation(self) -> int: ...
    def setAspectRatioMode(self, mode:PySide2.QtCore.Qt.AspectRatioMode): ...
    def setBrightness(self, brightness:int): ...
    def setContrast(self, contrast:int): ...
    def setDisplayRect(self, rect:PySide2.QtCore.QRect): ...
    def setFullScreen(self, fullScreen:bool): ...
    def setHue(self, hue:int): ...
    def setSaturation(self, saturation:int): ...
    def setWinId(self, id:int): ...
    def winId(self) -> int: ...

# eof
