# This Python file uses the following encoding: utf-8
#############################################################################
##
## Copyright (C) 2019 The Qt Company Ltd.
## Contact: https://www.qt.io/licensing/
##
## This file is part of Qt for Python.
##
## $QT_BEGIN_LICENSE:LGPL$
## Commercial License Usage
## Licensees holding valid commercial Qt licenses may use this file in
## accordance with the commercial license agreement provided with the
## Software or, alternatively, in accordance with the terms contained in
## a written agreement between you and The Qt Company. For licensing terms
## and conditions see https://www.qt.io/terms-conditions. For further
## information use the contact form at https://www.qt.io/contact-us.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 3 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL3 included in the
## packaging of this file. Please review the following information to
## ensure the GNU Lesser General Public License version 3 requirements
## will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
##
## GNU General Public License Usage
## Alternatively, this file may be used under the terms of the GNU
## General Public License version 2.0 or (at your option) the GNU General
## Public license version 3 or any later version approved by the KDE Free
## Qt Foundation. The licenses are as published by the Free Software
## Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
## included in the packaging of this file. Please review the following
## information to ensure the GNU General Public License requirements will
## be met: https://www.gnu.org/licenses/gpl-2.0.html and
## https://www.gnu.org/licenses/gpl-3.0.html.
##
## $QT_END_LICENSE$
##
#############################################################################

"""
This file contains the exact signatures for all functions in module
PySide2.QtWebEngineWidgets, except for defaults which are replaced by "...".
"""

# Module PySide2.QtWebEngineWidgets
import PySide2
from PySide2.support.signature import typing
from PySide2.support.signature.mapping import (
    Virtual, Missing, Invalid, Default, Instance)

class Object(object): pass

import shiboken2 as Shiboken
Shiboken.Object = Object

import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets
import PySide2.QtWebChannel
import PySide2.QtWebEngineCore
import PySide2.QtWebEngineWidgets


class QWebEngineCertificateError(Shiboken.Object):

    class Error(object): ...
    SslPinnedKeyNotInCertificateChain: Error = ... # -0x96
    CertificateCommonNameInvalid: Error = ... # -0xc8
    CertificateDateInvalid   : Error = ... # -0xc9
    CertificateAuthorityInvalid: Error = ... # -0xca
    CertificateContainsErrors: Error = ... # -0xcb
    CertificateNoRevocationMechanism: Error = ... # -0xcc
    CertificateUnableToCheckRevocation: Error = ... # -0xcd
    CertificateRevoked       : Error = ... # -0xce
    CertificateInvalid       : Error = ... # -0xcf
    CertificateWeakSignatureAlgorithm: Error = ... # -0xd0
    CertificateNonUniqueName : Error = ... # -0xd2
    CertificateWeakKey       : Error = ... # -0xd3
    CertificateNameConstraintViolation: Error = ... # -0xd4
    CertificateValidityTooLong: Error = ... # -0xd5
    CertificateTransparencyRequired: Error = ... # -0xd6

    def __init__(self, error:int, url:PySide2.QtCore.QUrl, overridable:bool, errorDescription:str): ...

    def error(self) -> PySide2.QtWebEngineWidgets.QWebEngineCertificateError.Error: ...
    def errorDescription(self) -> str: ...
    def isOverridable(self) -> bool: ...
    def url(self) -> PySide2.QtCore.QUrl: ...


class QWebEngineContextMenuData(Shiboken.Object):

    class EditFlag(object): ...
    CanUndo                  : EditFlag = ... # 0x1
    CanRedo                  : EditFlag = ... # 0x2
    CanCut                   : EditFlag = ... # 0x4
    CanCopy                  : EditFlag = ... # 0x8
    CanPaste                 : EditFlag = ... # 0x10
    CanDelete                : EditFlag = ... # 0x20
    CanSelectAll             : EditFlag = ... # 0x40
    CanTranslate             : EditFlag = ... # 0x80
    CanEditRichly            : EditFlag = ... # 0x100

    class EditFlags(object): ...

    class MediaFlag(object): ...
    MediaInError             : MediaFlag = ... # 0x1
    MediaPaused              : MediaFlag = ... # 0x2
    MediaMuted               : MediaFlag = ... # 0x4
    MediaLoop                : MediaFlag = ... # 0x8
    MediaCanSave             : MediaFlag = ... # 0x10
    MediaHasAudio            : MediaFlag = ... # 0x20
    MediaCanToggleControls   : MediaFlag = ... # 0x40
    MediaControls            : MediaFlag = ... # 0x80
    MediaCanPrint            : MediaFlag = ... # 0x100
    MediaCanRotate           : MediaFlag = ... # 0x200

    class MediaFlags(object): ...

    class MediaType(object): ...
    MediaTypeNone            : MediaType = ... # 0x0
    MediaTypeImage           : MediaType = ... # 0x1
    MediaTypeVideo           : MediaType = ... # 0x2
    MediaTypeAudio           : MediaType = ... # 0x3
    MediaTypeCanvas          : MediaType = ... # 0x4
    MediaTypeFile            : MediaType = ... # 0x5
    MediaTypePlugin          : MediaType = ... # 0x6

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other:PySide2.QtWebEngineWidgets.QWebEngineContextMenuData): ...

    def __copy__(self): ...
    def editFlags(self) -> PySide2.QtWebEngineWidgets.QWebEngineContextMenuData.EditFlags: ...
    def isContentEditable(self) -> bool: ...
    def isValid(self) -> bool: ...
    def linkText(self) -> str: ...
    def linkUrl(self) -> PySide2.QtCore.QUrl: ...
    def mediaFlags(self) -> PySide2.QtWebEngineWidgets.QWebEngineContextMenuData.MediaFlags: ...
    def mediaType(self) -> PySide2.QtWebEngineWidgets.QWebEngineContextMenuData.MediaType: ...
    def mediaUrl(self) -> PySide2.QtCore.QUrl: ...
    def misspelledWord(self) -> str: ...
    def position(self) -> PySide2.QtCore.QPoint: ...
    def selectedText(self) -> str: ...
    def spellCheckerSuggestions(self) -> typing.List: ...


class QWebEngineDownloadItem(PySide2.QtCore.QObject):

    class DownloadInterruptReason(object): ...
    NoReason                 : DownloadInterruptReason = ... # 0x0
    FileFailed               : DownloadInterruptReason = ... # 0x1
    FileAccessDenied         : DownloadInterruptReason = ... # 0x2
    FileNoSpace              : DownloadInterruptReason = ... # 0x3
    FileNameTooLong          : DownloadInterruptReason = ... # 0x5
    FileTooLarge             : DownloadInterruptReason = ... # 0x6
    FileVirusInfected        : DownloadInterruptReason = ... # 0x7
    FileTransientError       : DownloadInterruptReason = ... # 0xa
    FileBlocked              : DownloadInterruptReason = ... # 0xb
    FileSecurityCheckFailed  : DownloadInterruptReason = ... # 0xc
    FileTooShort             : DownloadInterruptReason = ... # 0xd
    FileHashMismatch         : DownloadInterruptReason = ... # 0xe
    NetworkFailed            : DownloadInterruptReason = ... # 0x14
    NetworkTimeout           : DownloadInterruptReason = ... # 0x15
    NetworkDisconnected      : DownloadInterruptReason = ... # 0x16
    NetworkServerDown        : DownloadInterruptReason = ... # 0x17
    NetworkInvalidRequest    : DownloadInterruptReason = ... # 0x18
    ServerFailed             : DownloadInterruptReason = ... # 0x1e
    ServerBadContent         : DownloadInterruptReason = ... # 0x21
    ServerUnauthorized       : DownloadInterruptReason = ... # 0x22
    ServerCertProblem        : DownloadInterruptReason = ... # 0x23
    ServerForbidden          : DownloadInterruptReason = ... # 0x24
    ServerUnreachable        : DownloadInterruptReason = ... # 0x25
    UserCanceled             : DownloadInterruptReason = ... # 0x28

    class DownloadState(object): ...
    DownloadRequested        : DownloadState = ... # 0x0
    DownloadInProgress       : DownloadState = ... # 0x1
    DownloadCompleted        : DownloadState = ... # 0x2
    DownloadCancelled        : DownloadState = ... # 0x3
    DownloadInterrupted      : DownloadState = ... # 0x4

    class DownloadType(object): ...
    Attachment               : DownloadType = ... # 0x0
    DownloadAttribute        : DownloadType = ... # 0x1
    UserRequested            : DownloadType = ... # 0x2
    SavePage                 : DownloadType = ... # 0x3

    class SavePageFormat(object): ...
    UnknownSaveFormat        : SavePageFormat = ... # -0x1
    SingleHtmlSaveFormat     : SavePageFormat = ... # 0x0
    CompleteHtmlSaveFormat   : SavePageFormat = ... # 0x1
    MimeHtmlSaveFormat       : SavePageFormat = ... # 0x2
    def accept(self): ...
    def cancel(self): ...
    def id(self) -> int: ...
    def interruptReason(self) -> PySide2.QtWebEngineWidgets.QWebEngineDownloadItem.DownloadInterruptReason: ...
    def interruptReasonString(self) -> str: ...
    def isFinished(self) -> bool: ...
    def isPaused(self) -> bool: ...
    def isSavePageDownload(self) -> bool: ...
    def mimeType(self) -> str: ...
    def page(self) -> PySide2.QtWebEngineWidgets.QWebEnginePage: ...
    def path(self) -> str: ...
    def pause(self): ...
    def receivedBytes(self) -> int: ...
    def resume(self): ...
    def savePageFormat(self) -> PySide2.QtWebEngineWidgets.QWebEngineDownloadItem.SavePageFormat: ...
    def setPath(self, path:str): ...
    def setSavePageFormat(self, format:PySide2.QtWebEngineWidgets.QWebEngineDownloadItem.SavePageFormat): ...
    def state(self) -> PySide2.QtWebEngineWidgets.QWebEngineDownloadItem.DownloadState: ...
    def totalBytes(self) -> int: ...
    def type(self) -> PySide2.QtWebEngineWidgets.QWebEngineDownloadItem.DownloadType: ...
    def url(self) -> PySide2.QtCore.QUrl: ...


class QWebEngineFullScreenRequest(Shiboken.Object):
    def accept(self): ...
    def origin(self) -> PySide2.QtCore.QUrl: ...
    def reject(self): ...
    def toggleOn(self) -> bool: ...


class QWebEngineHistory(Shiboken.Object):
    def __lshift__(self, stream:PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rshift__(self, stream:PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def back(self): ...
    def backItem(self) -> PySide2.QtWebEngineWidgets.QWebEngineHistoryItem: ...
    def backItems(self, maxItems:int) -> typing.List: ...
    def canGoBack(self) -> bool: ...
    def canGoForward(self) -> bool: ...
    def clear(self): ...
    def count(self) -> int: ...
    def currentItem(self) -> PySide2.QtWebEngineWidgets.QWebEngineHistoryItem: ...
    def currentItemIndex(self) -> int: ...
    def forward(self): ...
    def forwardItem(self) -> PySide2.QtWebEngineWidgets.QWebEngineHistoryItem: ...
    def forwardItems(self, maxItems:int) -> typing.List: ...
    def goToItem(self, item:PySide2.QtWebEngineWidgets.QWebEngineHistoryItem): ...
    def itemAt(self, i:int) -> PySide2.QtWebEngineWidgets.QWebEngineHistoryItem: ...
    def items(self) -> typing.List: ...


class QWebEngineHistoryItem(Shiboken.Object):

    def __init__(self, other:PySide2.QtWebEngineWidgets.QWebEngineHistoryItem): ...

    def __copy__(self): ...
    def iconUrl(self) -> PySide2.QtCore.QUrl: ...
    def isValid(self) -> bool: ...
    def lastVisited(self) -> PySide2.QtCore.QDateTime: ...
    def originalUrl(self) -> PySide2.QtCore.QUrl: ...
    def swap(self, other:PySide2.QtWebEngineWidgets.QWebEngineHistoryItem): ...
    def title(self) -> str: ...
    def url(self) -> PySide2.QtCore.QUrl: ...


class QWebEnginePage(PySide2.QtCore.QObject):

    class Feature(object): ...
    Notifications            : Feature = ... # 0x0
    Geolocation              : Feature = ... # 0x1
    MediaAudioCapture        : Feature = ... # 0x2
    MediaVideoCapture        : Feature = ... # 0x3
    MediaAudioVideoCapture   : Feature = ... # 0x4
    MouseLock                : Feature = ... # 0x5
    DesktopVideoCapture      : Feature = ... # 0x6
    DesktopAudioVideoCapture : Feature = ... # 0x7

    class FileSelectionMode(object): ...
    FileSelectOpen           : FileSelectionMode = ... # 0x0
    FileSelectOpenMultiple   : FileSelectionMode = ... # 0x1

    class FindFlag(object): ...
    FindBackward             : FindFlag = ... # 0x1
    FindCaseSensitively      : FindFlag = ... # 0x2

    class FindFlags(object): ...

    class JavaScriptConsoleMessageLevel(object): ...
    InfoMessageLevel         : JavaScriptConsoleMessageLevel = ... # 0x0
    WarningMessageLevel      : JavaScriptConsoleMessageLevel = ... # 0x1
    ErrorMessageLevel        : JavaScriptConsoleMessageLevel = ... # 0x2

    class NavigationType(object): ...
    NavigationTypeLinkClicked: NavigationType = ... # 0x0
    NavigationTypeTyped      : NavigationType = ... # 0x1
    NavigationTypeFormSubmitted: NavigationType = ... # 0x2
    NavigationTypeBackForward: NavigationType = ... # 0x3
    NavigationTypeReload     : NavigationType = ... # 0x4
    NavigationTypeOther      : NavigationType = ... # 0x5

    class PermissionPolicy(object): ...
    PermissionUnknown        : PermissionPolicy = ... # 0x0
    PermissionGrantedByUser  : PermissionPolicy = ... # 0x1
    PermissionDeniedByUser   : PermissionPolicy = ... # 0x2

    class RenderProcessTerminationStatus(object): ...
    NormalTerminationStatus  : RenderProcessTerminationStatus = ... # 0x0
    AbnormalTerminationStatus: RenderProcessTerminationStatus = ... # 0x1
    CrashedTerminationStatus : RenderProcessTerminationStatus = ... # 0x2
    KilledTerminationStatus  : RenderProcessTerminationStatus = ... # 0x3

    class WebAction(object): ...
    NoWebAction              : WebAction = ... # -0x1
    Back                     : WebAction = ... # 0x0
    Forward                  : WebAction = ... # 0x1
    Stop                     : WebAction = ... # 0x2
    Reload                   : WebAction = ... # 0x3
    Cut                      : WebAction = ... # 0x4
    Copy                     : WebAction = ... # 0x5
    Paste                    : WebAction = ... # 0x6
    Undo                     : WebAction = ... # 0x7
    Redo                     : WebAction = ... # 0x8
    SelectAll                : WebAction = ... # 0x9
    ReloadAndBypassCache     : WebAction = ... # 0xa
    PasteAndMatchStyle       : WebAction = ... # 0xb
    OpenLinkInThisWindow     : WebAction = ... # 0xc
    OpenLinkInNewWindow      : WebAction = ... # 0xd
    OpenLinkInNewTab         : WebAction = ... # 0xe
    CopyLinkToClipboard      : WebAction = ... # 0xf
    DownloadLinkToDisk       : WebAction = ... # 0x10
    CopyImageToClipboard     : WebAction = ... # 0x11
    CopyImageUrlToClipboard  : WebAction = ... # 0x12
    DownloadImageToDisk      : WebAction = ... # 0x13
    CopyMediaUrlToClipboard  : WebAction = ... # 0x14
    ToggleMediaControls      : WebAction = ... # 0x15
    ToggleMediaLoop          : WebAction = ... # 0x16
    ToggleMediaPlayPause     : WebAction = ... # 0x17
    ToggleMediaMute          : WebAction = ... # 0x18
    DownloadMediaToDisk      : WebAction = ... # 0x19
    InspectElement           : WebAction = ... # 0x1a
    ExitFullScreen           : WebAction = ... # 0x1b
    RequestClose             : WebAction = ... # 0x1c
    Unselect                 : WebAction = ... # 0x1d
    SavePage                 : WebAction = ... # 0x1e
    OpenLinkInNewBackgroundTab: WebAction = ... # 0x1f
    ViewSource               : WebAction = ... # 0x20
    ToggleBold               : WebAction = ... # 0x21
    ToggleItalic             : WebAction = ... # 0x22
    ToggleUnderline          : WebAction = ... # 0x23
    ToggleStrikethrough      : WebAction = ... # 0x24
    AlignLeft                : WebAction = ... # 0x25
    AlignCenter              : WebAction = ... # 0x26
    AlignRight               : WebAction = ... # 0x27
    AlignJustified           : WebAction = ... # 0x28
    Indent                   : WebAction = ... # 0x29
    Outdent                  : WebAction = ... # 0x2a
    InsertOrderedList        : WebAction = ... # 0x2b
    InsertUnorderedList      : WebAction = ... # 0x2c
    WebActionCount           : WebAction = ... # 0x2d

    class WebWindowType(object): ...
    WebBrowserWindow         : WebWindowType = ... # 0x0
    WebBrowserTab            : WebWindowType = ... # 0x1
    WebDialog                : WebWindowType = ... # 0x2
    WebBrowserBackgroundTab  : WebWindowType = ... # 0x3

    @typing.overload
    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, profile:PySide2.QtWebEngineWidgets.QWebEngineProfile, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def acceptNavigationRequest(self, url:PySide2.QtCore.QUrl, type:PySide2.QtWebEngineWidgets.QWebEnginePage.NavigationType, isMainFrame:bool) -> bool: ...
    def action(self, action:PySide2.QtWebEngineWidgets.QWebEnginePage.WebAction) -> PySide2.QtWidgets.QAction: ...
    def backgroundColor(self) -> PySide2.QtGui.QColor: ...
    def certificateError(self, certificateError:PySide2.QtWebEngineWidgets.QWebEngineCertificateError) -> bool: ...
    def chooseFiles(self, mode:PySide2.QtWebEngineWidgets.QWebEnginePage.FileSelectionMode, oldFiles:typing.List, acceptedMimeTypes:typing.List) -> typing.List: ...
    def contentsSize(self) -> PySide2.QtCore.QSizeF: ...
    def contextMenuData(self) -> PySide2.QtWebEngineWidgets.QWebEngineContextMenuData: ...
    def createStandardContextMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def createWindow(self, type:PySide2.QtWebEngineWidgets.QWebEnginePage.WebWindowType) -> PySide2.QtWebEngineWidgets.QWebEnginePage: ...
    def devToolsPage(self) -> PySide2.QtWebEngineWidgets.QWebEnginePage: ...
    def download(self, url:PySide2.QtCore.QUrl, filename:str=...): ...
    def event(self, arg__1:PySide2.QtCore.QEvent) -> bool: ...
    def findText(self, subString:str, options:PySide2.QtWebEngineWidgets.QWebEnginePage.FindFlags=...): ...
    def hasSelection(self) -> bool: ...
    def history(self) -> PySide2.QtWebEngineWidgets.QWebEngineHistory: ...
    def icon(self) -> PySide2.QtGui.QIcon: ...
    def iconUrl(self) -> PySide2.QtCore.QUrl: ...
    def inspectedPage(self) -> PySide2.QtWebEngineWidgets.QWebEnginePage: ...
    def isAudioMuted(self) -> bool: ...
    def javaScriptAlert(self, securityOrigin:PySide2.QtCore.QUrl, msg:str): ...
    def javaScriptConfirm(self, securityOrigin:PySide2.QtCore.QUrl, msg:str) -> bool: ...
    def javaScriptConsoleMessage(self, level:PySide2.QtWebEngineWidgets.QWebEnginePage.JavaScriptConsoleMessageLevel, message:str, lineNumber:int, sourceID:str): ...
    def javaScriptPrompt(self, securityOrigin:PySide2.QtCore.QUrl, msg:str, defaultValue:str, result:str) -> bool: ...
    @typing.overload
    def load(self, request:PySide2.QtWebEngineCore.QWebEngineHttpRequest): ...
    @typing.overload
    def load(self, url:PySide2.QtCore.QUrl): ...
    def printToPdf(self, filePath:str, layout:PySide2.QtGui.QPageLayout=...): ...
    def profile(self) -> PySide2.QtWebEngineWidgets.QWebEngineProfile: ...
    def recentlyAudible(self) -> bool: ...
    def replaceMisspelledWord(self, replacement:str): ...
    def requestedUrl(self) -> PySide2.QtCore.QUrl: ...
    @typing.overload
    def runJavaScript(self, scriptSource:str): ...
    @typing.overload
    def runJavaScript(self, scriptSource:str, worldId:int): ...
    def save(self, filePath:str, format:PySide2.QtWebEngineWidgets.QWebEngineDownloadItem.SavePageFormat=...): ...
    def scripts(self) -> PySide2.QtWebEngineWidgets.QWebEngineScriptCollection: ...
    def scrollPosition(self) -> PySide2.QtCore.QPointF: ...
    def selectedText(self) -> str: ...
    def setAudioMuted(self, muted:bool): ...
    def setBackgroundColor(self, color:PySide2.QtGui.QColor): ...
    def setContent(self, data:PySide2.QtCore.QByteArray, mimeType:str=..., baseUrl:PySide2.QtCore.QUrl=...): ...
    def setDevToolsPage(self, page:PySide2.QtWebEngineWidgets.QWebEnginePage): ...
    def setFeaturePermission(self, securityOrigin:PySide2.QtCore.QUrl, feature:PySide2.QtWebEngineWidgets.QWebEnginePage.Feature, policy:PySide2.QtWebEngineWidgets.QWebEnginePage.PermissionPolicy): ...
    def setHtml(self, html:str, baseUrl:PySide2.QtCore.QUrl=...): ...
    def setInspectedPage(self, page:PySide2.QtWebEngineWidgets.QWebEnginePage): ...
    def setUrl(self, url:PySide2.QtCore.QUrl): ...
    def setUrlRequestInterceptor(self, interceptor:PySide2.QtWebEngineCore.QWebEngineUrlRequestInterceptor): ...
    def setView(self, view:PySide2.QtWidgets.QWidget): ...
    @typing.overload
    def setWebChannel(self, arg__1:PySide2.QtWebChannel.QWebChannel): ...
    @typing.overload
    def setWebChannel(self, arg__1:PySide2.QtWebChannel.QWebChannel, worldId:int): ...
    def setZoomFactor(self, factor:float): ...
    def settings(self) -> PySide2.QtWebEngineWidgets.QWebEngineSettings: ...
    def title(self) -> str: ...
    def triggerAction(self, action:PySide2.QtWebEngineWidgets.QWebEnginePage.WebAction, checked:bool=...): ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def view(self) -> PySide2.QtWidgets.QWidget: ...
    def webChannel(self) -> PySide2.QtWebChannel.QWebChannel: ...
    def zoomFactor(self) -> float: ...


class QWebEngineProfile(PySide2.QtCore.QObject):

    class HttpCacheType(object): ...
    MemoryHttpCache          : HttpCacheType = ... # 0x0
    DiskHttpCache            : HttpCacheType = ... # 0x1
    NoCache                  : HttpCacheType = ... # 0x2

    class PersistentCookiesPolicy(object): ...
    NoPersistentCookies      : PersistentCookiesPolicy = ... # 0x0
    AllowPersistentCookies   : PersistentCookiesPolicy = ... # 0x1
    ForcePersistentCookies   : PersistentCookiesPolicy = ... # 0x2

    @typing.overload
    def __init__(self, name:str, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...
    @typing.overload
    def __init__(self, parent:typing.Optional[PySide2.QtCore.QObject]=...): ...

    def cachePath(self) -> str: ...
    def clearAllVisitedLinks(self): ...
    def clearHttpCache(self): ...
    def clearVisitedLinks(self, urls:typing.List): ...
    def cookieStore(self) -> PySide2.QtWebEngineCore.QWebEngineCookieStore: ...
    @staticmethod
    def defaultProfile() -> PySide2.QtWebEngineWidgets.QWebEngineProfile: ...
    def downloadPath(self) -> str: ...
    def httpAcceptLanguage(self) -> str: ...
    def httpCacheMaximumSize(self) -> int: ...
    def httpCacheType(self) -> PySide2.QtWebEngineWidgets.QWebEngineProfile.HttpCacheType: ...
    def httpUserAgent(self) -> str: ...
    def installUrlSchemeHandler(self, scheme:PySide2.QtCore.QByteArray, arg__2:PySide2.QtWebEngineCore.QWebEngineUrlSchemeHandler): ...
    def isOffTheRecord(self) -> bool: ...
    def isSpellCheckEnabled(self) -> bool: ...
    def isUsedForGlobalCertificateVerification(self) -> bool: ...
    def persistentCookiesPolicy(self) -> PySide2.QtWebEngineWidgets.QWebEngineProfile.PersistentCookiesPolicy: ...
    def persistentStoragePath(self) -> str: ...
    def removeAllUrlSchemeHandlers(self): ...
    def removeUrlScheme(self, scheme:PySide2.QtCore.QByteArray): ...
    def removeUrlSchemeHandler(self, arg__1:PySide2.QtWebEngineCore.QWebEngineUrlSchemeHandler): ...
    def scripts(self) -> PySide2.QtWebEngineWidgets.QWebEngineScriptCollection: ...
    def setCachePath(self, path:str): ...
    def setDownloadPath(self, path:str): ...
    def setHttpAcceptLanguage(self, httpAcceptLanguage:str): ...
    def setHttpCacheMaximumSize(self, maxSize:int): ...
    def setHttpCacheType(self, arg__1:PySide2.QtWebEngineWidgets.QWebEngineProfile.HttpCacheType): ...
    def setHttpUserAgent(self, userAgent:str): ...
    def setPersistentCookiesPolicy(self, arg__1:PySide2.QtWebEngineWidgets.QWebEngineProfile.PersistentCookiesPolicy): ...
    def setPersistentStoragePath(self, path:str): ...
    def setRequestInterceptor(self, interceptor:PySide2.QtWebEngineCore.QWebEngineUrlRequestInterceptor): ...
    def setSpellCheckEnabled(self, enabled:bool): ...
    def setSpellCheckLanguages(self, languages:typing.List): ...
    def setUrlRequestInterceptor(self, interceptor:PySide2.QtWebEngineCore.QWebEngineUrlRequestInterceptor): ...
    def setUseForGlobalCertificateVerification(self, enabled:bool=...): ...
    def settings(self) -> PySide2.QtWebEngineWidgets.QWebEngineSettings: ...
    def spellCheckLanguages(self) -> typing.List: ...
    def storageName(self) -> str: ...
    def urlSchemeHandler(self, arg__1:PySide2.QtCore.QByteArray) -> PySide2.QtWebEngineCore.QWebEngineUrlSchemeHandler: ...
    def visitedLinksContainsUrl(self, url:PySide2.QtCore.QUrl) -> bool: ...


class QWebEngineScript(Shiboken.Object):

    class InjectionPoint(object): ...
    Deferred                 : InjectionPoint = ... # 0x0
    DocumentReady            : InjectionPoint = ... # 0x1
    DocumentCreation         : InjectionPoint = ... # 0x2

    class ScriptWorldId(object): ...
    MainWorld                : ScriptWorldId = ... # 0x0
    ApplicationWorld         : ScriptWorldId = ... # 0x1
    UserWorld                : ScriptWorldId = ... # 0x2

    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, other:PySide2.QtWebEngineWidgets.QWebEngineScript): ...

    def __copy__(self): ...
    def injectionPoint(self) -> PySide2.QtWebEngineWidgets.QWebEngineScript.InjectionPoint: ...
    def isNull(self) -> bool: ...
    def name(self) -> str: ...
    def runsOnSubFrames(self) -> bool: ...
    def setInjectionPoint(self, arg__1:PySide2.QtWebEngineWidgets.QWebEngineScript.InjectionPoint): ...
    def setName(self, arg__1:str): ...
    def setRunsOnSubFrames(self, on:bool): ...
    def setSourceCode(self, arg__1:str): ...
    def setWorldId(self, arg__1:int): ...
    def sourceCode(self) -> str: ...
    def swap(self, other:PySide2.QtWebEngineWidgets.QWebEngineScript): ...
    def worldId(self) -> int: ...


class QWebEngineScriptCollection(Shiboken.Object):
    def clear(self): ...
    def contains(self, value:PySide2.QtWebEngineWidgets.QWebEngineScript) -> bool: ...
    def count(self) -> int: ...
    def findScript(self, name:str) -> PySide2.QtWebEngineWidgets.QWebEngineScript: ...
    def findScripts(self, name:str) -> typing.List: ...
    @typing.overload
    def insert(self, arg__1:PySide2.QtWebEngineWidgets.QWebEngineScript): ...
    @typing.overload
    def insert(self, list:typing.List): ...
    def isEmpty(self) -> bool: ...
    def remove(self, arg__1:PySide2.QtWebEngineWidgets.QWebEngineScript) -> bool: ...
    def size(self) -> int: ...
    def toList(self) -> typing.List: ...


class QWebEngineSettings(Shiboken.Object):

    class FontFamily(object): ...
    StandardFont             : FontFamily = ... # 0x0
    FixedFont                : FontFamily = ... # 0x1
    SerifFont                : FontFamily = ... # 0x2
    SansSerifFont            : FontFamily = ... # 0x3
    CursiveFont              : FontFamily = ... # 0x4
    FantasyFont              : FontFamily = ... # 0x5
    PictographFont           : FontFamily = ... # 0x6

    class FontSize(object): ...
    MinimumFontSize          : FontSize = ... # 0x0
    MinimumLogicalFontSize   : FontSize = ... # 0x1
    DefaultFontSize          : FontSize = ... # 0x2
    DefaultFixedFontSize     : FontSize = ... # 0x3

    class UnknownUrlSchemePolicy(object): ...
    DisallowUnknownUrlSchemes: UnknownUrlSchemePolicy = ... # 0x1
    AllowUnknownUrlSchemesFromUserInteraction: UnknownUrlSchemePolicy = ... # 0x2
    AllowAllUnknownUrlSchemes: UnknownUrlSchemePolicy = ... # 0x3

    class WebAttribute(object): ...
    AutoLoadImages           : WebAttribute = ... # 0x0
    JavascriptEnabled        : WebAttribute = ... # 0x1
    JavascriptCanOpenWindows : WebAttribute = ... # 0x2
    JavascriptCanAccessClipboard: WebAttribute = ... # 0x3
    LinksIncludedInFocusChain: WebAttribute = ... # 0x4
    LocalStorageEnabled      : WebAttribute = ... # 0x5
    LocalContentCanAccessRemoteUrls: WebAttribute = ... # 0x6
    XSSAuditingEnabled       : WebAttribute = ... # 0x7
    SpatialNavigationEnabled : WebAttribute = ... # 0x8
    LocalContentCanAccessFileUrls: WebAttribute = ... # 0x9
    HyperlinkAuditingEnabled : WebAttribute = ... # 0xa
    ScrollAnimatorEnabled    : WebAttribute = ... # 0xb
    ErrorPageEnabled         : WebAttribute = ... # 0xc
    PluginsEnabled           : WebAttribute = ... # 0xd
    FullScreenSupportEnabled : WebAttribute = ... # 0xe
    ScreenCaptureEnabled     : WebAttribute = ... # 0xf
    WebGLEnabled             : WebAttribute = ... # 0x10
    Accelerated2dCanvasEnabled: WebAttribute = ... # 0x11
    AutoLoadIconsForPage     : WebAttribute = ... # 0x12
    TouchIconsEnabled        : WebAttribute = ... # 0x13
    FocusOnNavigationEnabled : WebAttribute = ... # 0x14
    PrintElementBackgrounds  : WebAttribute = ... # 0x15
    AllowRunningInsecureContent: WebAttribute = ... # 0x16
    AllowGeolocationOnInsecureOrigins: WebAttribute = ... # 0x17
    AllowWindowActivationFromJavaScript: WebAttribute = ... # 0x18
    ShowScrollBars           : WebAttribute = ... # 0x19
    PlaybackRequiresUserGesture: WebAttribute = ... # 0x1a
    WebRTCPublicInterfacesOnly: WebAttribute = ... # 0x1b
    JavascriptCanPaste       : WebAttribute = ... # 0x1c
    DnsPrefetchEnabled       : WebAttribute = ... # 0x1d
    PdfViewerEnabled         : WebAttribute = ... # 0x1e
    @staticmethod
    def defaultSettings() -> PySide2.QtWebEngineWidgets.QWebEngineSettings: ...
    def defaultTextEncoding(self) -> str: ...
    def fontFamily(self, which:PySide2.QtWebEngineWidgets.QWebEngineSettings.FontFamily) -> str: ...
    def fontSize(self, type:PySide2.QtWebEngineWidgets.QWebEngineSettings.FontSize) -> int: ...
    @staticmethod
    def globalSettings() -> PySide2.QtWebEngineWidgets.QWebEngineSettings: ...
    def resetAttribute(self, attr:PySide2.QtWebEngineWidgets.QWebEngineSettings.WebAttribute): ...
    def resetFontFamily(self, which:PySide2.QtWebEngineWidgets.QWebEngineSettings.FontFamily): ...
    def resetFontSize(self, type:PySide2.QtWebEngineWidgets.QWebEngineSettings.FontSize): ...
    def resetUnknownUrlSchemePolicy(self): ...
    def setAttribute(self, attr:PySide2.QtWebEngineWidgets.QWebEngineSettings.WebAttribute, on:bool): ...
    def setDefaultTextEncoding(self, encoding:str): ...
    def setFontFamily(self, which:PySide2.QtWebEngineWidgets.QWebEngineSettings.FontFamily, family:str): ...
    def setFontSize(self, type:PySide2.QtWebEngineWidgets.QWebEngineSettings.FontSize, size:int): ...
    def setUnknownUrlSchemePolicy(self, policy:PySide2.QtWebEngineWidgets.QWebEngineSettings.UnknownUrlSchemePolicy): ...
    def testAttribute(self, attr:PySide2.QtWebEngineWidgets.QWebEngineSettings.WebAttribute) -> bool: ...
    def unknownUrlSchemePolicy(self) -> PySide2.QtWebEngineWidgets.QWebEngineSettings.UnknownUrlSchemePolicy: ...


class QWebEngineView(PySide2.QtWidgets.QWidget):

    def __init__(self, parent:typing.Optional[PySide2.QtWidgets.QWidget]=...): ...

    def back(self): ...
    def contextMenuEvent(self, arg__1:PySide2.QtGui.QContextMenuEvent): ...
    def createWindow(self, type:PySide2.QtWebEngineWidgets.QWebEnginePage.WebWindowType) -> PySide2.QtWebEngineWidgets.QWebEngineView: ...
    def dragEnterEvent(self, e:PySide2.QtGui.QDragEnterEvent): ...
    def dragLeaveEvent(self, e:PySide2.QtGui.QDragLeaveEvent): ...
    def dragMoveEvent(self, e:PySide2.QtGui.QDragMoveEvent): ...
    def dropEvent(self, e:PySide2.QtGui.QDropEvent): ...
    def event(self, arg__1:PySide2.QtCore.QEvent) -> bool: ...
    def findText(self, subString:str, options:PySide2.QtWebEngineWidgets.QWebEnginePage.FindFlags=...): ...
    def forward(self): ...
    def hasSelection(self) -> bool: ...
    def hideEvent(self, arg__1:PySide2.QtGui.QHideEvent): ...
    def history(self) -> PySide2.QtWebEngineWidgets.QWebEngineHistory: ...
    def icon(self) -> PySide2.QtGui.QIcon: ...
    def iconUrl(self) -> PySide2.QtCore.QUrl: ...
    @typing.overload
    def load(self, request:PySide2.QtWebEngineCore.QWebEngineHttpRequest): ...
    @typing.overload
    def load(self, url:PySide2.QtCore.QUrl): ...
    def page(self) -> PySide2.QtWebEngineWidgets.QWebEnginePage: ...
    def pageAction(self, action:PySide2.QtWebEngineWidgets.QWebEnginePage.WebAction) -> PySide2.QtWidgets.QAction: ...
    def reload(self): ...
    def selectedText(self) -> str: ...
    def setContent(self, data:PySide2.QtCore.QByteArray, mimeType:str=..., baseUrl:PySide2.QtCore.QUrl=...): ...
    def setHtml(self, html:str, baseUrl:PySide2.QtCore.QUrl=...): ...
    def setPage(self, page:PySide2.QtWebEngineWidgets.QWebEnginePage): ...
    def setUrl(self, url:PySide2.QtCore.QUrl): ...
    def setZoomFactor(self, factor:float): ...
    def settings(self) -> PySide2.QtWebEngineWidgets.QWebEngineSettings: ...
    def showEvent(self, arg__1:PySide2.QtGui.QShowEvent): ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def stop(self): ...
    def title(self) -> str: ...
    def triggerPageAction(self, action:PySide2.QtWebEngineWidgets.QWebEnginePage.WebAction, checked:bool=...): ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def zoomFactor(self) -> float: ...

# eof
